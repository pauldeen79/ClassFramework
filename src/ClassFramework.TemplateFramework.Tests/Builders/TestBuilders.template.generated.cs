// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.7
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ClassFramework.TemplateFramework.Tests.Builders
{
    public partial class TestEntityBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Func<string> _singleProperty;

        private System.Collections.ObjectModel.ObservableCollection<System.Func<string>> _collectionProperty;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public System.Func<string> SingleProperty
        {
            get
            {
                return _singleProperty;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Func<System.String>>.Default.Equals(_singleProperty!, value!);
                _singleProperty = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SingleProperty));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.ObjectModel.ObservableCollection<System.Func<string>> CollectionProperty
        {
            get
            {
                return _collectionProperty;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<System.Func<System.String>>>.Default.Equals(_collectionProperty!, value!);
                _collectionProperty = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CollectionProperty));
            }
        }

        public TestEntityBuilder(ClassFramework.TemplateFramework.Tests.TestEntity source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _collectionProperty = new System.Collections.ObjectModel.ObservableCollection<System.Func<string>>();
            _singleProperty = new System.Func<System.String>(() => source.SingleProperty);
            if (source.CollectionProperty is not null) foreach (var item in source.CollectionProperty) _collectionProperty.Add(new System.Func<System.String>(() => item));
        }

        public TestEntityBuilder()
        {
            _collectionProperty = new System.Collections.ObjectModel.ObservableCollection<System.Func<string>>();
            _singleProperty = new System.Func<System.String>(() => string.Empty);
            SetDefaultValues();
        }

        public ClassFramework.TemplateFramework.Tests.TestEntity Build()
        {
            return new ClassFramework.TemplateFramework.Tests.TestEntity(SingleProperty(), CollectionProperty.Select(x => x()));
        }

        partial void SetDefaultValues();

        public ClassFramework.TemplateFramework.Tests.Builders.TestEntityBuilder AddCollectionProperty(System.Collections.Generic.IEnumerable<System.Func<string>> collectionProperty)
        {
            if (collectionProperty is null) throw new System.ArgumentNullException(nameof(collectionProperty));
            return AddCollectionProperty(collectionProperty.ToArray());
        }

        public ClassFramework.TemplateFramework.Tests.Builders.TestEntityBuilder AddCollectionProperty(params System.Func<string>[] collectionProperty)
        {
            if (collectionProperty is null) throw new System.ArgumentNullException(nameof(collectionProperty));
            foreach (var item in collectionProperty) CollectionProperty.Add(item);
            return this;
        }

        public ClassFramework.TemplateFramework.Tests.Builders.TestEntityBuilder WithSingleProperty(System.Func<string> singleProperty)
        {
            if (singleProperty is null) throw new System.ArgumentNullException(nameof(singleProperty));
            SingleProperty = singleProperty;
            return this;
        }

        public ClassFramework.TemplateFramework.Tests.Builders.TestEntityBuilder WithSingleProperty(string singleProperty)
        {
            if (singleProperty is null) throw new System.ArgumentNullException(nameof(singleProperty));
            SingleProperty = new System.Func<System.String>(() => singleProperty);
            return this;
        }

        public static implicit operator ClassFramework.TemplateFramework.Tests.TestEntity(TestEntityBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
