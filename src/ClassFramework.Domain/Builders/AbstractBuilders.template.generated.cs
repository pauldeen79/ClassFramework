// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.9
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ClassFramework.Domain.Builders
{
    public abstract partial class CodeStatementBaseBuilder<TBuilder, TEntity> : CodeStatementBaseBuilder, CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.CodeStatementBase>
        where TEntity : ClassFramework.Domain.CodeStatementBase
        where TBuilder : CodeStatementBaseBuilder<TBuilder, TEntity>
    {
        protected CodeStatementBaseBuilder(ClassFramework.Domain.CodeStatementBase source) : base(source)
        {
        }

        protected CodeStatementBaseBuilder() : base()
        {
        }

        public override ClassFramework.Domain.CodeStatementBase Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();

        public static implicit operator ClassFramework.Domain.CodeStatementBase(CodeStatementBaseBuilder<TBuilder, TEntity> builder)
        {
            return builder.BuildTyped();
        }
    }
    public abstract partial class TypeBaseBuilder<TBuilder, TEntity> : TypeBaseBuilder, ClassFramework.Domain.Builders.Abstractions.ITypeBuilder, ClassFramework.Domain.Builders.Abstractions.IVisibilityContainerBuilder, ClassFramework.Domain.Builders.Abstractions.INameContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IAttributesContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IGenericTypeArgumentsContainerBuilder, ClassFramework.Domain.Builders.Abstractions.ISuppressWarningCodesContainerBuilder, CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.TypeBase>
        where TEntity : ClassFramework.Domain.TypeBase
        where TBuilder : TypeBaseBuilder<TBuilder, TEntity>
    {
        protected TypeBaseBuilder(ClassFramework.Domain.TypeBase source) : base(source)
        {
        }

        protected TypeBaseBuilder() : base()
        {
        }

        public override ClassFramework.Domain.TypeBase Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();

        ClassFramework.Domain.Abstractions.IType CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IType>.Build()
        {
            return BuildTyped();
        }

        ClassFramework.Domain.Abstractions.IVisibilityContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IVisibilityContainer>.Build()
        {
            return BuildTyped();
        }

        ClassFramework.Domain.Abstractions.INameContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.INameContainer>.Build()
        {
            return BuildTyped();
        }

        ClassFramework.Domain.Abstractions.IAttributesContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IAttributesContainer>.Build()
        {
            return BuildTyped();
        }

        ClassFramework.Domain.Abstractions.IGenericTypeArgumentsContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IGenericTypeArgumentsContainer>.Build()
        {
            return BuildTyped();
        }

        ClassFramework.Domain.Abstractions.ISuppressWarningCodesContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.ISuppressWarningCodesContainer>.Build()
        {
            return BuildTyped();
        }

        public static implicit operator ClassFramework.Domain.TypeBase(TypeBaseBuilder<TBuilder, TEntity> builder)
        {
            return builder.BuildTyped();
        }
    }
}
#nullable disable
