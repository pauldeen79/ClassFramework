// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ClassFramework.Domain.Builders
{
    public abstract partial class CodeStatementBaseBuilder<TBuilder, TEntity> : CodeStatementBaseBuilder
        where TEntity : ClassFramework.Domain.CodeStatementBase
        where TBuilder : CodeStatementBaseBuilder<TBuilder, TEntity>
    {
        protected CodeStatementBaseBuilder(ClassFramework.Domain.CodeStatementBase source) : base(source)
        {
        }

        protected CodeStatementBaseBuilder() : base()
        {
        }

        public override ClassFramework.Domain.CodeStatementBase Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();

        public static implicit operator ClassFramework.Domain.CodeStatementBase(CodeStatementBaseBuilder<TBuilder, TEntity> entity)
        {
            return entity.BuildTyped();
        }
    }
    public abstract partial class TypeBaseBuilder<TBuilder, TEntity> : TypeBaseBuilder, ClassFramework.Domain.Builders.Abstractions.ITypeBuilder, ClassFramework.Domain.Builders.Abstractions.IVisibilityContainerBuilder, ClassFramework.Domain.Builders.Abstractions.INameContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IAttributesContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IGenericTypeArgumentsContainerBuilder, ClassFramework.Domain.Builders.Abstractions.ISuppressWarningCodesContainerBuilder
        where TEntity : ClassFramework.Domain.TypeBase
        where TBuilder : TypeBaseBuilder<TBuilder, TEntity>
    {
        protected TypeBaseBuilder(ClassFramework.Domain.TypeBase source) : base(source)
        {
        }

        protected TypeBaseBuilder() : base()
        {
        }

        public override ClassFramework.Domain.TypeBase Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();

        ClassFramework.Domain.Abstractions.IType ClassFramework.Domain.Builders.Abstractions.ITypeBuilder.Build()
        {
            return BuildTyped();
        }

        ClassFramework.Domain.Abstractions.IVisibilityContainer ClassFramework.Domain.Builders.Abstractions.IVisibilityContainerBuilder.Build()
        {
            return BuildTyped();
        }

        ClassFramework.Domain.Abstractions.INameContainer ClassFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return BuildTyped();
        }

        ClassFramework.Domain.Abstractions.IAttributesContainer ClassFramework.Domain.Builders.Abstractions.IAttributesContainerBuilder.Build()
        {
            return BuildTyped();
        }

        ClassFramework.Domain.Abstractions.IGenericTypeArgumentsContainer ClassFramework.Domain.Builders.Abstractions.IGenericTypeArgumentsContainerBuilder.Build()
        {
            return BuildTyped();
        }

        ClassFramework.Domain.Abstractions.ISuppressWarningCodesContainer ClassFramework.Domain.Builders.Abstractions.ISuppressWarningCodesContainerBuilder.Build()
        {
            return BuildTyped();
        }

        public static implicit operator ClassFramework.Domain.TypeBase(TypeBaseBuilder<TBuilder, TEntity> entity)
        {
            return entity.BuildTyped();
        }
    }
}
#nullable disable
