// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.10
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ClassFramework.Domain.Builders
{
    public partial class AttributeBuilder : ClassFramework.Domain.Builders.Abstractions.INameContainerBuilder, System.ComponentModel.INotifyPropertyChanged, CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Attribute>
    {
        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeParameterBuilder> _parameters;

        private string _name;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeParameterBuilder> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.AttributeParameterBuilder>>.Default.Equals(_parameters!, value!);
                _parameters = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Parameters));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public AttributeBuilder(ClassFramework.Domain.Attribute source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeParameterBuilder>();
            if (source.Parameters is not null) foreach (var item in source.Parameters.Select(x => x.ToBuilder())) _parameters.Add(item);
            _name = source.Name;
        }

        public AttributeBuilder()
        {
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeParameterBuilder>();
            _name = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Domain.Attribute Build()
        {
            return new ClassFramework.Domain.Attribute(Parameters.Select(x => x.Build()!).ToList().AsReadOnly(), Name);
        }

        ClassFramework.Domain.Abstractions.INameContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.INameContainer>.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public ClassFramework.Domain.Builders.AttributeBuilder AddParameters(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.AttributeParameterBuilder> parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            return AddParameters(parameters.ToArray());
        }

        public ClassFramework.Domain.Builders.AttributeBuilder AddParameters(params ClassFramework.Domain.Builders.AttributeParameterBuilder[] parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            foreach (var item in parameters) Parameters.Add(item);
            return this;
        }

        public static implicit operator ClassFramework.Domain.Attribute(AttributeBuilder builder)
        {
            return builder.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class AttributeParameterBuilder : System.ComponentModel.INotifyPropertyChanged, CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.AttributeParameter>
    {
        private string _name;

        private object? _value;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public object? Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Object>.Default.Equals(_value!, value!);
                _value = value;
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public AttributeParameterBuilder(ClassFramework.Domain.AttributeParameter source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _name = source.Name;
            _value = source.Value;
        }

        public AttributeParameterBuilder()
        {
            _name = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Domain.AttributeParameter Build()
        {
            return new ClassFramework.Domain.AttributeParameter(Name, Value);
        }

        partial void SetDefaultValues();

        public ClassFramework.Domain.Builders.AttributeParameterBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public ClassFramework.Domain.Builders.AttributeParameterBuilder WithValue(object? value)
        {
            Value = value;
            return this;
        }

        public static implicit operator ClassFramework.Domain.AttributeParameter(AttributeParameterBuilder builder)
        {
            return builder.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class ConstructorBuilder : ClassFramework.Domain.Builders.Abstractions.IModifiersContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IVisibilityContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IAttributesContainerBuilder, ClassFramework.Domain.Builders.Abstractions.ICodeStatementsContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IParametersContainerBuilder, ClassFramework.Domain.Builders.Abstractions.ISuppressWarningCodesContainerBuilder, System.ComponentModel.INotifyPropertyChanged, CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Constructor>
    {
        private string _chainCall;

        private bool _static;

        private bool _virtual;

        private bool _abstract;

        private bool _protected;

        private bool _override;

        private bool _new;

        private ClassFramework.Domain.Domains.Visibility _visibility;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> _attributes;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _codeStatements;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.ParameterBuilder> _parameters;

        private System.Collections.ObjectModel.ObservableCollection<string> _suppressWarningCodes;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string ChainCall
        {
            get
            {
                return _chainCall;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_chainCall!, value!);
                _chainCall = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ChainCall));
            }
        }

        public bool Static
        {
            get
            {
                return _static;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_static, value);
                _static = value;
                if (hasChanged) HandlePropertyChanged(nameof(Static));
            }
        }

        public bool Virtual
        {
            get
            {
                return _virtual;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_virtual, value);
                _virtual = value;
                if (hasChanged) HandlePropertyChanged(nameof(Virtual));
            }
        }

        public bool Abstract
        {
            get
            {
                return _abstract;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_abstract, value);
                _abstract = value;
                if (hasChanged) HandlePropertyChanged(nameof(Abstract));
            }
        }

        public bool Protected
        {
            get
            {
                return _protected;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_protected, value);
                _protected = value;
                if (hasChanged) HandlePropertyChanged(nameof(Protected));
            }
        }

        public bool Override
        {
            get
            {
                return _override;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_override, value);
                _override = value;
                if (hasChanged) HandlePropertyChanged(nameof(Override));
            }
        }

        public bool New
        {
            get
            {
                return _new;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_new, value);
                _new = value;
                if (hasChanged) HandlePropertyChanged(nameof(New));
            }
        }

        public ClassFramework.Domain.Domains.Visibility Visibility
        {
            get
            {
                return _visibility;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ClassFramework.Domain.Domains.Visibility>.Default.Equals(_visibility, value);
                _visibility = value;
                if (hasChanged) HandlePropertyChanged(nameof(Visibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> Attributes
        {
            get
            {
                return _attributes;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.AttributeBuilder>>.Default.Equals(_attributes!, value!);
                _attributes = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Attributes));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> CodeStatements
        {
            get
            {
                return _codeStatements;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>>.Default.Equals(_codeStatements!, value!);
                _codeStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CodeStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.ParameterBuilder> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.ParameterBuilder>>.Default.Equals(_parameters!, value!);
                _parameters = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Parameters));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.ObjectModel.ObservableCollection<string> SuppressWarningCodes
        {
            get
            {
                return _suppressWarningCodes;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.ObjectModel.ObservableCollection<System.String>>.Default.Equals(_suppressWarningCodes!, value!);
                _suppressWarningCodes = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SuppressWarningCodes));
            }
        }

        public ConstructorBuilder(ClassFramework.Domain.Constructor source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            _codeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.ParameterBuilder>();
            _suppressWarningCodes = new System.Collections.ObjectModel.ObservableCollection<string>();
            _chainCall = source.ChainCall;
            _static = source.Static;
            _virtual = source.Virtual;
            _abstract = source.Abstract;
            _protected = source.Protected;
            _override = source.Override;
            _new = source.New;
            _visibility = source.Visibility;
            if (source.Attributes is not null) foreach (var item in source.Attributes.Select(x => x.ToBuilder())) _attributes.Add(item);
            if (source.CodeStatements is not null) foreach (var item in source.CodeStatements.Select(x => x.ToBuilder())) _codeStatements.Add(item);
            if (source.Parameters is not null) foreach (var item in source.Parameters.Select(x => x.ToBuilder())) _parameters.Add(item);
            if (source.SuppressWarningCodes is not null) foreach (var item in source.SuppressWarningCodes) _suppressWarningCodes.Add(item);
        }

        public ConstructorBuilder()
        {
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            _codeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.ParameterBuilder>();
            _suppressWarningCodes = new System.Collections.ObjectModel.ObservableCollection<string>();
            _chainCall = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Domain.Constructor Build()
        {
            return new ClassFramework.Domain.Constructor(ChainCall, Static, Virtual, Abstract, Protected, Override, New, Visibility, Attributes.Select(x => x.Build()!).ToList().AsReadOnly(), CodeStatements.Select(x => x.Build()!).ToList().AsReadOnly(), Parameters.Select(x => x.Build()!).ToList().AsReadOnly(), SuppressWarningCodes);
        }

        ClassFramework.Domain.Abstractions.IModifiersContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IModifiersContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IVisibilityContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IVisibilityContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IAttributesContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IAttributesContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.ICodeStatementsContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.ICodeStatementsContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IParametersContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IParametersContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.ISuppressWarningCodesContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.ISuppressWarningCodesContainer>.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public ClassFramework.Domain.Builders.ConstructorBuilder WithChainCall(string chainCall)
        {
            if (chainCall is null) throw new System.ArgumentNullException(nameof(chainCall));
            ChainCall = chainCall;
            return this;
        }

        public static implicit operator ClassFramework.Domain.Constructor(ConstructorBuilder builder)
        {
            return builder.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class EnumerationBuilder : ClassFramework.Domain.Builders.Abstractions.IAttributesContainerBuilder, ClassFramework.Domain.Builders.Abstractions.INameContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IVisibilityContainerBuilder, System.ComponentModel.INotifyPropertyChanged, CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Enumeration>
    {
        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.EnumerationMemberBuilder> _members;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> _attributes;

        private string _name;

        private ClassFramework.Domain.Domains.Visibility _visibility;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.EnumerationMemberBuilder> Members
        {
            get
            {
                return _members;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.EnumerationMemberBuilder>>.Default.Equals(_members!, value!);
                _members = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Members));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> Attributes
        {
            get
            {
                return _attributes;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.AttributeBuilder>>.Default.Equals(_attributes!, value!);
                _attributes = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Attributes));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public ClassFramework.Domain.Domains.Visibility Visibility
        {
            get
            {
                return _visibility;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ClassFramework.Domain.Domains.Visibility>.Default.Equals(_visibility, value);
                _visibility = value;
                if (hasChanged) HandlePropertyChanged(nameof(Visibility));
            }
        }

        public EnumerationBuilder(ClassFramework.Domain.Enumeration source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _members = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.EnumerationMemberBuilder>();
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            if (source.Members is not null) foreach (var item in source.Members.Select(x => x.ToBuilder())) _members.Add(item);
            if (source.Attributes is not null) foreach (var item in source.Attributes.Select(x => x.ToBuilder())) _attributes.Add(item);
            _name = source.Name;
            _visibility = source.Visibility;
        }

        public EnumerationBuilder()
        {
            _members = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.EnumerationMemberBuilder>();
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            _name = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Domain.Enumeration Build()
        {
            return new ClassFramework.Domain.Enumeration(Members.Select(x => x.Build()!).ToList().AsReadOnly(), Attributes.Select(x => x.Build()!).ToList().AsReadOnly(), Name, Visibility);
        }

        ClassFramework.Domain.Abstractions.IAttributesContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IAttributesContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.INameContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.INameContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IVisibilityContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IVisibilityContainer>.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public ClassFramework.Domain.Builders.EnumerationBuilder AddMembers(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.EnumerationMemberBuilder> members)
        {
            if (members is null) throw new System.ArgumentNullException(nameof(members));
            return AddMembers(members.ToArray());
        }

        public ClassFramework.Domain.Builders.EnumerationBuilder AddMembers(params ClassFramework.Domain.Builders.EnumerationMemberBuilder[] members)
        {
            if (members is null) throw new System.ArgumentNullException(nameof(members));
            foreach (var item in members) Members.Add(item);
            return this;
        }

        public static implicit operator ClassFramework.Domain.Enumeration(EnumerationBuilder builder)
        {
            return builder.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class EnumerationMemberBuilder : ClassFramework.Domain.Builders.Abstractions.IAttributesContainerBuilder, ClassFramework.Domain.Builders.Abstractions.INameContainerBuilder, System.ComponentModel.INotifyPropertyChanged, CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.EnumerationMember>
    {
        private object? _value;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> _attributes;

        private string _name;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public object? Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Object>.Default.Equals(_value!, value!);
                _value = value;
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> Attributes
        {
            get
            {
                return _attributes;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.AttributeBuilder>>.Default.Equals(_attributes!, value!);
                _attributes = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Attributes));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public EnumerationMemberBuilder(ClassFramework.Domain.EnumerationMember source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            _value = source.Value;
            if (source.Attributes is not null) foreach (var item in source.Attributes.Select(x => x.ToBuilder())) _attributes.Add(item);
            _name = source.Name;
        }

        public EnumerationMemberBuilder()
        {
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            _name = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Domain.EnumerationMember Build()
        {
            return new ClassFramework.Domain.EnumerationMember(Value, Attributes.Select(x => x.Build()!).ToList().AsReadOnly(), Name);
        }

        ClassFramework.Domain.Abstractions.IAttributesContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IAttributesContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.INameContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.INameContainer>.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public ClassFramework.Domain.Builders.EnumerationMemberBuilder WithValue(object? value)
        {
            Value = value;
            return this;
        }

        public static implicit operator ClassFramework.Domain.EnumerationMember(EnumerationMemberBuilder builder)
        {
            return builder.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FieldBuilder : ClassFramework.Domain.Builders.Abstractions.IModifiersContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IVisibilityContainerBuilder, ClassFramework.Domain.Builders.Abstractions.INameContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IAttributesContainerBuilder, ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IDefaultValueContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IParentTypeContainerBuilder, System.ComponentModel.INotifyPropertyChanged, CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Field>
    {
        private bool _readOnly;

        private bool _constant;

        private bool _event;

        private bool _static;

        private bool _virtual;

        private bool _abstract;

        private bool _protected;

        private bool _override;

        private bool _new;

        private ClassFramework.Domain.Domains.Visibility _visibility;

        private string _name;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> _attributes;

        private string _typeName;

        private bool _isNullable;

        private bool _isValueType;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder> _genericTypeArguments;

        private object? _defaultValue;

        private string _parentTypeFullName;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public bool ReadOnly
        {
            get
            {
                return _readOnly;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_readOnly, value);
                _readOnly = value;
                if (hasChanged) HandlePropertyChanged(nameof(ReadOnly));
            }
        }

        public bool Constant
        {
            get
            {
                return _constant;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_constant, value);
                _constant = value;
                if (hasChanged) HandlePropertyChanged(nameof(Constant));
            }
        }

        public bool Event
        {
            get
            {
                return _event;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_event, value);
                _event = value;
                if (hasChanged) HandlePropertyChanged(nameof(Event));
            }
        }

        public bool Static
        {
            get
            {
                return _static;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_static, value);
                _static = value;
                if (hasChanged) HandlePropertyChanged(nameof(Static));
            }
        }

        public bool Virtual
        {
            get
            {
                return _virtual;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_virtual, value);
                _virtual = value;
                if (hasChanged) HandlePropertyChanged(nameof(Virtual));
            }
        }

        public bool Abstract
        {
            get
            {
                return _abstract;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_abstract, value);
                _abstract = value;
                if (hasChanged) HandlePropertyChanged(nameof(Abstract));
            }
        }

        public bool Protected
        {
            get
            {
                return _protected;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_protected, value);
                _protected = value;
                if (hasChanged) HandlePropertyChanged(nameof(Protected));
            }
        }

        public bool Override
        {
            get
            {
                return _override;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_override, value);
                _override = value;
                if (hasChanged) HandlePropertyChanged(nameof(Override));
            }
        }

        public bool New
        {
            get
            {
                return _new;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_new, value);
                _new = value;
                if (hasChanged) HandlePropertyChanged(nameof(New));
            }
        }

        public ClassFramework.Domain.Domains.Visibility Visibility
        {
            get
            {
                return _visibility;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ClassFramework.Domain.Domains.Visibility>.Default.Equals(_visibility, value);
                _visibility = value;
                if (hasChanged) HandlePropertyChanged(nameof(Visibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> Attributes
        {
            get
            {
                return _attributes;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.AttributeBuilder>>.Default.Equals(_attributes!, value!);
                _attributes = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Attributes));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_typeName!, value!);
                _typeName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeName));
            }
        }

        public bool IsNullable
        {
            get
            {
                return _isNullable;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isNullable, value);
                _isNullable = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsNullable));
            }
        }

        public bool IsValueType
        {
            get
            {
                return _isValueType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isValueType, value);
                _isValueType = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsValueType));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder> GenericTypeArguments
        {
            get
            {
                return _genericTypeArguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder>>.Default.Equals(_genericTypeArguments!, value!);
                _genericTypeArguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(GenericTypeArguments));
            }
        }

        public object? DefaultValue
        {
            get
            {
                return _defaultValue;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Object>.Default.Equals(_defaultValue!, value!);
                _defaultValue = value;
                if (hasChanged) HandlePropertyChanged(nameof(DefaultValue));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string ParentTypeFullName
        {
            get
            {
                return _parentTypeFullName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_parentTypeFullName!, value!);
                _parentTypeFullName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ParentTypeFullName));
            }
        }

        public FieldBuilder(ClassFramework.Domain.Field source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            _genericTypeArguments = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder>();
            _readOnly = source.ReadOnly;
            _constant = source.Constant;
            _event = source.Event;
            _static = source.Static;
            _virtual = source.Virtual;
            _abstract = source.Abstract;
            _protected = source.Protected;
            _override = source.Override;
            _new = source.New;
            _visibility = source.Visibility;
            _name = source.Name;
            if (source.Attributes is not null) foreach (var item in source.Attributes.Select(x => x.ToBuilder())) _attributes.Add(item);
            _typeName = source.TypeName;
            _isNullable = source.IsNullable;
            _isValueType = source.IsValueType;
            if (source.GenericTypeArguments is not null) foreach (var item in source.GenericTypeArguments.Select(x => x.ToBuilder())) _genericTypeArguments.Add(item);
            _defaultValue = source.DefaultValue;
            _parentTypeFullName = source.ParentTypeFullName;
        }

        public FieldBuilder()
        {
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            _genericTypeArguments = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder>();
            _name = string.Empty;
            _typeName = string.Empty;
            _parentTypeFullName = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Domain.Field Build()
        {
            return new ClassFramework.Domain.Field(ReadOnly, Constant, Event, Static, Virtual, Abstract, Protected, Override, New, Visibility, Name, Attributes.Select(x => x.Build()!).ToList().AsReadOnly(), TypeName, IsNullable, IsValueType, GenericTypeArguments.Select(x => x.Build()!).ToList().AsReadOnly(), DefaultValue, ParentTypeFullName);
        }

        ClassFramework.Domain.Abstractions.IModifiersContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IModifiersContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IVisibilityContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IVisibilityContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.INameContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.INameContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IAttributesContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IAttributesContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.ITypeContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.ITypeContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IDefaultValueContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IDefaultValueContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IParentTypeContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IParentTypeContainer>.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public ClassFramework.Domain.Builders.FieldBuilder WithReadOnly(bool readOnly = true)
        {
            ReadOnly = readOnly;
            return this;
        }

        public ClassFramework.Domain.Builders.FieldBuilder WithConstant(bool constant = true)
        {
            Constant = constant;
            return this;
        }

        public ClassFramework.Domain.Builders.FieldBuilder WithEvent(bool @event = true)
        {
            Event = @event;
            return this;
        }

        public static implicit operator ClassFramework.Domain.Field(FieldBuilder builder)
        {
            return builder.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class LiteralBuilder : System.ComponentModel.INotifyPropertyChanged, CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Literal>
    {
        private string _value;

        private object? _originalValue;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_value!, value!);
                _value = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public object? OriginalValue
        {
            get
            {
                return _originalValue;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Object>.Default.Equals(_originalValue!, value!);
                _originalValue = value;
                if (hasChanged) HandlePropertyChanged(nameof(OriginalValue));
            }
        }

        public LiteralBuilder(ClassFramework.Domain.Literal source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _value = source.Value;
            _originalValue = source.OriginalValue;
        }

        public LiteralBuilder()
        {
            _value = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Domain.Literal Build()
        {
            return new ClassFramework.Domain.Literal(Value, OriginalValue);
        }

        partial void SetDefaultValues();

        public ClassFramework.Domain.Builders.LiteralBuilder WithValue(string value)
        {
            if (value is null) throw new System.ArgumentNullException(nameof(value));
            Value = value;
            return this;
        }

        public ClassFramework.Domain.Builders.LiteralBuilder WithOriginalValue(object? originalValue)
        {
            OriginalValue = originalValue;
            return this;
        }

        public static implicit operator ClassFramework.Domain.Literal(LiteralBuilder builder)
        {
            return builder.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class MethodBuilder : ClassFramework.Domain.Builders.Abstractions.IModifiersContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IVisibilityContainerBuilder, ClassFramework.Domain.Builders.Abstractions.INameContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IAttributesContainerBuilder, ClassFramework.Domain.Builders.Abstractions.ICodeStatementsContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IParametersContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IExplicitInterfaceNameContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IParentTypeContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IGenericTypeArgumentsContainerBuilder, ClassFramework.Domain.Builders.Abstractions.ISuppressWarningCodesContainerBuilder, System.ComponentModel.INotifyPropertyChanged, CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Method>
    {
        private string _returnTypeName;

        private bool _returnTypeIsNullable;

        private bool _returnTypeIsValueType;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder> _returnTypeGenericTypeArguments;

        private bool _partial;

        private bool _extensionMethod;

        private bool _operator;

        private bool _async;

        private bool _static;

        private bool _virtual;

        private bool _abstract;

        private bool _protected;

        private bool _override;

        private bool _new;

        private ClassFramework.Domain.Domains.Visibility _visibility;

        private string _name;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> _attributes;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _codeStatements;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.ParameterBuilder> _parameters;

        private string _explicitInterfaceName;

        private string _parentTypeFullName;

        private System.Collections.ObjectModel.ObservableCollection<string> _genericTypeArguments;

        private System.Collections.ObjectModel.ObservableCollection<string> _genericTypeArgumentConstraints;

        private System.Collections.ObjectModel.ObservableCollection<string> _suppressWarningCodes;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string ReturnTypeName
        {
            get
            {
                return _returnTypeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_returnTypeName!, value!);
                _returnTypeName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ReturnTypeName));
            }
        }

        public bool ReturnTypeIsNullable
        {
            get
            {
                return _returnTypeIsNullable;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_returnTypeIsNullable, value);
                _returnTypeIsNullable = value;
                if (hasChanged) HandlePropertyChanged(nameof(ReturnTypeIsNullable));
            }
        }

        public bool ReturnTypeIsValueType
        {
            get
            {
                return _returnTypeIsValueType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_returnTypeIsValueType, value);
                _returnTypeIsValueType = value;
                if (hasChanged) HandlePropertyChanged(nameof(ReturnTypeIsValueType));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder> ReturnTypeGenericTypeArguments
        {
            get
            {
                return _returnTypeGenericTypeArguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder>>.Default.Equals(_returnTypeGenericTypeArguments!, value!);
                _returnTypeGenericTypeArguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ReturnTypeGenericTypeArguments));
            }
        }

        public bool Partial
        {
            get
            {
                return _partial;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_partial, value);
                _partial = value;
                if (hasChanged) HandlePropertyChanged(nameof(Partial));
            }
        }

        public bool ExtensionMethod
        {
            get
            {
                return _extensionMethod;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_extensionMethod, value);
                _extensionMethod = value;
                if (hasChanged) HandlePropertyChanged(nameof(ExtensionMethod));
            }
        }

        public bool Operator
        {
            get
            {
                return _operator;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_operator, value);
                _operator = value;
                if (hasChanged) HandlePropertyChanged(nameof(Operator));
            }
        }

        public bool Async
        {
            get
            {
                return _async;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_async, value);
                _async = value;
                if (hasChanged) HandlePropertyChanged(nameof(Async));
            }
        }

        public bool Static
        {
            get
            {
                return _static;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_static, value);
                _static = value;
                if (hasChanged) HandlePropertyChanged(nameof(Static));
            }
        }

        public bool Virtual
        {
            get
            {
                return _virtual;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_virtual, value);
                _virtual = value;
                if (hasChanged) HandlePropertyChanged(nameof(Virtual));
            }
        }

        public bool Abstract
        {
            get
            {
                return _abstract;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_abstract, value);
                _abstract = value;
                if (hasChanged) HandlePropertyChanged(nameof(Abstract));
            }
        }

        public bool Protected
        {
            get
            {
                return _protected;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_protected, value);
                _protected = value;
                if (hasChanged) HandlePropertyChanged(nameof(Protected));
            }
        }

        public bool Override
        {
            get
            {
                return _override;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_override, value);
                _override = value;
                if (hasChanged) HandlePropertyChanged(nameof(Override));
            }
        }

        public bool New
        {
            get
            {
                return _new;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_new, value);
                _new = value;
                if (hasChanged) HandlePropertyChanged(nameof(New));
            }
        }

        public ClassFramework.Domain.Domains.Visibility Visibility
        {
            get
            {
                return _visibility;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ClassFramework.Domain.Domains.Visibility>.Default.Equals(_visibility, value);
                _visibility = value;
                if (hasChanged) HandlePropertyChanged(nameof(Visibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> Attributes
        {
            get
            {
                return _attributes;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.AttributeBuilder>>.Default.Equals(_attributes!, value!);
                _attributes = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Attributes));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> CodeStatements
        {
            get
            {
                return _codeStatements;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>>.Default.Equals(_codeStatements!, value!);
                _codeStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CodeStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.ParameterBuilder> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.ParameterBuilder>>.Default.Equals(_parameters!, value!);
                _parameters = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Parameters));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string ExplicitInterfaceName
        {
            get
            {
                return _explicitInterfaceName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_explicitInterfaceName!, value!);
                _explicitInterfaceName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ExplicitInterfaceName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string ParentTypeFullName
        {
            get
            {
                return _parentTypeFullName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_parentTypeFullName!, value!);
                _parentTypeFullName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ParentTypeFullName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<string> GenericTypeArguments
        {
            get
            {
                return _genericTypeArguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.ObjectModel.ObservableCollection<System.String>>.Default.Equals(_genericTypeArguments!, value!);
                _genericTypeArguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(GenericTypeArguments));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<string> GenericTypeArgumentConstraints
        {
            get
            {
                return _genericTypeArgumentConstraints;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.ObjectModel.ObservableCollection<System.String>>.Default.Equals(_genericTypeArgumentConstraints!, value!);
                _genericTypeArgumentConstraints = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(GenericTypeArgumentConstraints));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.ObjectModel.ObservableCollection<string> SuppressWarningCodes
        {
            get
            {
                return _suppressWarningCodes;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.ObjectModel.ObservableCollection<System.String>>.Default.Equals(_suppressWarningCodes!, value!);
                _suppressWarningCodes = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SuppressWarningCodes));
            }
        }

        public MethodBuilder(ClassFramework.Domain.Method source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _returnTypeGenericTypeArguments = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder>();
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            _codeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.ParameterBuilder>();
            _genericTypeArguments = new System.Collections.ObjectModel.ObservableCollection<string>();
            _genericTypeArgumentConstraints = new System.Collections.ObjectModel.ObservableCollection<string>();
            _suppressWarningCodes = new System.Collections.ObjectModel.ObservableCollection<string>();
            _returnTypeName = source.ReturnTypeName;
            _returnTypeIsNullable = source.ReturnTypeIsNullable;
            _returnTypeIsValueType = source.ReturnTypeIsValueType;
            if (source.ReturnTypeGenericTypeArguments is not null) foreach (var item in source.ReturnTypeGenericTypeArguments.Select(x => x.ToBuilder())) _returnTypeGenericTypeArguments.Add(item);
            _partial = source.Partial;
            _extensionMethod = source.ExtensionMethod;
            _operator = source.Operator;
            _async = source.Async;
            _static = source.Static;
            _virtual = source.Virtual;
            _abstract = source.Abstract;
            _protected = source.Protected;
            _override = source.Override;
            _new = source.New;
            _visibility = source.Visibility;
            _name = source.Name;
            if (source.Attributes is not null) foreach (var item in source.Attributes.Select(x => x.ToBuilder())) _attributes.Add(item);
            if (source.CodeStatements is not null) foreach (var item in source.CodeStatements.Select(x => x.ToBuilder())) _codeStatements.Add(item);
            if (source.Parameters is not null) foreach (var item in source.Parameters.Select(x => x.ToBuilder())) _parameters.Add(item);
            _explicitInterfaceName = source.ExplicitInterfaceName;
            _parentTypeFullName = source.ParentTypeFullName;
            if (source.GenericTypeArguments is not null) foreach (var item in source.GenericTypeArguments) _genericTypeArguments.Add(item);
            if (source.GenericTypeArgumentConstraints is not null) foreach (var item in source.GenericTypeArgumentConstraints) _genericTypeArgumentConstraints.Add(item);
            if (source.SuppressWarningCodes is not null) foreach (var item in source.SuppressWarningCodes) _suppressWarningCodes.Add(item);
        }

        public MethodBuilder()
        {
            _returnTypeGenericTypeArguments = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder>();
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            _codeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.ParameterBuilder>();
            _genericTypeArguments = new System.Collections.ObjectModel.ObservableCollection<string>();
            _genericTypeArgumentConstraints = new System.Collections.ObjectModel.ObservableCollection<string>();
            _suppressWarningCodes = new System.Collections.ObjectModel.ObservableCollection<string>();
            _returnTypeName = string.Empty;
            _name = string.Empty;
            _explicitInterfaceName = string.Empty;
            _parentTypeFullName = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Domain.Method Build()
        {
            return new ClassFramework.Domain.Method(ReturnTypeName, ReturnTypeIsNullable, ReturnTypeIsValueType, ReturnTypeGenericTypeArguments.Select(x => x.Build()!).ToList().AsReadOnly(), Partial, ExtensionMethod, Operator, Async, Static, Virtual, Abstract, Protected, Override, New, Visibility, Name, Attributes.Select(x => x.Build()!).ToList().AsReadOnly(), CodeStatements.Select(x => x.Build()!).ToList().AsReadOnly(), Parameters.Select(x => x.Build()!).ToList().AsReadOnly(), ExplicitInterfaceName, ParentTypeFullName, GenericTypeArguments, GenericTypeArgumentConstraints, SuppressWarningCodes);
        }

        ClassFramework.Domain.Abstractions.IModifiersContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IModifiersContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IVisibilityContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IVisibilityContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.INameContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.INameContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IAttributesContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IAttributesContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.ICodeStatementsContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.ICodeStatementsContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IParametersContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IParametersContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IExplicitInterfaceNameContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IExplicitInterfaceNameContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IParentTypeContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IParentTypeContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IGenericTypeArgumentsContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IGenericTypeArgumentsContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.ISuppressWarningCodesContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.ISuppressWarningCodesContainer>.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public ClassFramework.Domain.Builders.MethodBuilder AddReturnTypeGenericTypeArguments(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder> returnTypeGenericTypeArguments)
        {
            if (returnTypeGenericTypeArguments is null) throw new System.ArgumentNullException(nameof(returnTypeGenericTypeArguments));
            return AddReturnTypeGenericTypeArguments(returnTypeGenericTypeArguments.ToArray());
        }

        public ClassFramework.Domain.Builders.MethodBuilder AddReturnTypeGenericTypeArguments(params ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder[] returnTypeGenericTypeArguments)
        {
            if (returnTypeGenericTypeArguments is null) throw new System.ArgumentNullException(nameof(returnTypeGenericTypeArguments));
            foreach (var item in returnTypeGenericTypeArguments) ReturnTypeGenericTypeArguments.Add(item);
            return this;
        }

        public ClassFramework.Domain.Builders.MethodBuilder WithReturnTypeName(string returnTypeName)
        {
            if (returnTypeName is null) throw new System.ArgumentNullException(nameof(returnTypeName));
            ReturnTypeName = returnTypeName;
            return this;
        }

        public ClassFramework.Domain.Builders.MethodBuilder WithReturnTypeIsNullable(bool returnTypeIsNullable = true)
        {
            ReturnTypeIsNullable = returnTypeIsNullable;
            return this;
        }

        public ClassFramework.Domain.Builders.MethodBuilder WithReturnTypeIsValueType(bool returnTypeIsValueType = true)
        {
            ReturnTypeIsValueType = returnTypeIsValueType;
            return this;
        }

        public ClassFramework.Domain.Builders.MethodBuilder WithPartial(bool partial = true)
        {
            Partial = partial;
            return this;
        }

        public ClassFramework.Domain.Builders.MethodBuilder WithExtensionMethod(bool extensionMethod = true)
        {
            ExtensionMethod = extensionMethod;
            return this;
        }

        public ClassFramework.Domain.Builders.MethodBuilder WithOperator(bool @operator = true)
        {
            Operator = @operator;
            return this;
        }

        public ClassFramework.Domain.Builders.MethodBuilder WithAsync(bool async = true)
        {
            Async = async;
            return this;
        }

        public static implicit operator ClassFramework.Domain.Method(MethodBuilder builder)
        {
            return builder.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class ParameterBuilder : ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IAttributesContainerBuilder, ClassFramework.Domain.Builders.Abstractions.INameContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IDefaultValueContainerBuilder, System.ComponentModel.INotifyPropertyChanged, CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Parameter>
    {
        private bool _isParamArray;

        private bool _isOut;

        private bool _isRef;

        private string _typeName;

        private bool _isNullable;

        private bool _isValueType;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder> _genericTypeArguments;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> _attributes;

        private string _name;

        private object? _defaultValue;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public bool IsParamArray
        {
            get
            {
                return _isParamArray;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isParamArray, value);
                _isParamArray = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsParamArray));
            }
        }

        public bool IsOut
        {
            get
            {
                return _isOut;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isOut, value);
                _isOut = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsOut));
            }
        }

        public bool IsRef
        {
            get
            {
                return _isRef;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isRef, value);
                _isRef = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsRef));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_typeName!, value!);
                _typeName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeName));
            }
        }

        public bool IsNullable
        {
            get
            {
                return _isNullable;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isNullable, value);
                _isNullable = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsNullable));
            }
        }

        public bool IsValueType
        {
            get
            {
                return _isValueType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isValueType, value);
                _isValueType = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsValueType));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder> GenericTypeArguments
        {
            get
            {
                return _genericTypeArguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder>>.Default.Equals(_genericTypeArguments!, value!);
                _genericTypeArguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(GenericTypeArguments));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> Attributes
        {
            get
            {
                return _attributes;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.AttributeBuilder>>.Default.Equals(_attributes!, value!);
                _attributes = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Attributes));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public object? DefaultValue
        {
            get
            {
                return _defaultValue;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Object>.Default.Equals(_defaultValue!, value!);
                _defaultValue = value;
                if (hasChanged) HandlePropertyChanged(nameof(DefaultValue));
            }
        }

        public ParameterBuilder(ClassFramework.Domain.Parameter source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _genericTypeArguments = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder>();
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            _isParamArray = source.IsParamArray;
            _isOut = source.IsOut;
            _isRef = source.IsRef;
            _typeName = source.TypeName;
            _isNullable = source.IsNullable;
            _isValueType = source.IsValueType;
            if (source.GenericTypeArguments is not null) foreach (var item in source.GenericTypeArguments.Select(x => x.ToBuilder())) _genericTypeArguments.Add(item);
            if (source.Attributes is not null) foreach (var item in source.Attributes.Select(x => x.ToBuilder())) _attributes.Add(item);
            _name = source.Name;
            _defaultValue = source.DefaultValue;
        }

        public ParameterBuilder()
        {
            _genericTypeArguments = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder>();
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            _typeName = string.Empty;
            _name = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Domain.Parameter Build()
        {
            return new ClassFramework.Domain.Parameter(IsParamArray, IsOut, IsRef, TypeName, IsNullable, IsValueType, GenericTypeArguments.Select(x => x.Build()!).ToList().AsReadOnly(), Attributes.Select(x => x.Build()!).ToList().AsReadOnly(), Name, DefaultValue);
        }

        ClassFramework.Domain.Abstractions.ITypeContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.ITypeContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IAttributesContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IAttributesContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.INameContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.INameContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IDefaultValueContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IDefaultValueContainer>.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public ClassFramework.Domain.Builders.ParameterBuilder WithIsParamArray(bool isParamArray = true)
        {
            IsParamArray = isParamArray;
            return this;
        }

        public ClassFramework.Domain.Builders.ParameterBuilder WithIsOut(bool isOut = true)
        {
            IsOut = isOut;
            return this;
        }

        public ClassFramework.Domain.Builders.ParameterBuilder WithIsRef(bool isRef = true)
        {
            IsRef = isRef;
            return this;
        }

        public static implicit operator ClassFramework.Domain.Parameter(ParameterBuilder builder)
        {
            return builder.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class PropertyBuilder : ClassFramework.Domain.Builders.Abstractions.IModifiersContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IVisibilityContainerBuilder, ClassFramework.Domain.Builders.Abstractions.INameContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IAttributesContainerBuilder, ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IDefaultValueContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IExplicitInterfaceNameContainerBuilder, ClassFramework.Domain.Builders.Abstractions.IParentTypeContainerBuilder, System.ComponentModel.INotifyPropertyChanged, CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Property>
    {
        private bool _hasGetter;

        private bool _hasSetter;

        private bool _hasInitializer;

        private ClassFramework.Domain.Domains.SubVisibility _getterVisibility;

        private ClassFramework.Domain.Domains.SubVisibility _setterVisibility;

        private ClassFramework.Domain.Domains.SubVisibility _initializerVisibility;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _getterCodeStatements;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _setterCodeStatements;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _initializerCodeStatements;

        private bool _static;

        private bool _virtual;

        private bool _abstract;

        private bool _protected;

        private bool _override;

        private bool _new;

        private ClassFramework.Domain.Domains.Visibility _visibility;

        private string _name;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> _attributes;

        private string _typeName;

        private bool _isNullable;

        private bool _isValueType;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder> _genericTypeArguments;

        private object? _defaultValue;

        private string _explicitInterfaceName;

        private string _parentTypeFullName;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool HasGetter
        {
            get
            {
                return _hasGetter;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_hasGetter, value);
                _hasGetter = value;
                if (hasChanged) HandlePropertyChanged(nameof(HasGetter));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool HasSetter
        {
            get
            {
                return _hasSetter;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_hasSetter, value);
                _hasSetter = value;
                if (hasChanged) HandlePropertyChanged(nameof(HasSetter));
            }
        }

        public bool HasInitializer
        {
            get
            {
                return _hasInitializer;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_hasInitializer, value);
                _hasInitializer = value;
                if (hasChanged) HandlePropertyChanged(nameof(HasInitializer));
            }
        }

        public ClassFramework.Domain.Domains.SubVisibility GetterVisibility
        {
            get
            {
                return _getterVisibility;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ClassFramework.Domain.Domains.SubVisibility>.Default.Equals(_getterVisibility, value);
                _getterVisibility = value;
                if (hasChanged) HandlePropertyChanged(nameof(GetterVisibility));
            }
        }

        public ClassFramework.Domain.Domains.SubVisibility SetterVisibility
        {
            get
            {
                return _setterVisibility;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ClassFramework.Domain.Domains.SubVisibility>.Default.Equals(_setterVisibility, value);
                _setterVisibility = value;
                if (hasChanged) HandlePropertyChanged(nameof(SetterVisibility));
            }
        }

        public ClassFramework.Domain.Domains.SubVisibility InitializerVisibility
        {
            get
            {
                return _initializerVisibility;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ClassFramework.Domain.Domains.SubVisibility>.Default.Equals(_initializerVisibility, value);
                _initializerVisibility = value;
                if (hasChanged) HandlePropertyChanged(nameof(InitializerVisibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> GetterCodeStatements
        {
            get
            {
                return _getterCodeStatements;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>>.Default.Equals(_getterCodeStatements!, value!);
                _getterCodeStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(GetterCodeStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> SetterCodeStatements
        {
            get
            {
                return _setterCodeStatements;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>>.Default.Equals(_setterCodeStatements!, value!);
                _setterCodeStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SetterCodeStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> InitializerCodeStatements
        {
            get
            {
                return _initializerCodeStatements;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>>.Default.Equals(_initializerCodeStatements!, value!);
                _initializerCodeStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(InitializerCodeStatements));
            }
        }

        public bool Static
        {
            get
            {
                return _static;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_static, value);
                _static = value;
                if (hasChanged) HandlePropertyChanged(nameof(Static));
            }
        }

        public bool Virtual
        {
            get
            {
                return _virtual;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_virtual, value);
                _virtual = value;
                if (hasChanged) HandlePropertyChanged(nameof(Virtual));
            }
        }

        public bool Abstract
        {
            get
            {
                return _abstract;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_abstract, value);
                _abstract = value;
                if (hasChanged) HandlePropertyChanged(nameof(Abstract));
            }
        }

        public bool Protected
        {
            get
            {
                return _protected;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_protected, value);
                _protected = value;
                if (hasChanged) HandlePropertyChanged(nameof(Protected));
            }
        }

        public bool Override
        {
            get
            {
                return _override;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_override, value);
                _override = value;
                if (hasChanged) HandlePropertyChanged(nameof(Override));
            }
        }

        public bool New
        {
            get
            {
                return _new;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_new, value);
                _new = value;
                if (hasChanged) HandlePropertyChanged(nameof(New));
            }
        }

        public ClassFramework.Domain.Domains.Visibility Visibility
        {
            get
            {
                return _visibility;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ClassFramework.Domain.Domains.Visibility>.Default.Equals(_visibility, value);
                _visibility = value;
                if (hasChanged) HandlePropertyChanged(nameof(Visibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder> Attributes
        {
            get
            {
                return _attributes;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.AttributeBuilder>>.Default.Equals(_attributes!, value!);
                _attributes = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Attributes));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_typeName!, value!);
                _typeName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeName));
            }
        }

        public bool IsNullable
        {
            get
            {
                return _isNullable;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isNullable, value);
                _isNullable = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsNullable));
            }
        }

        public bool IsValueType
        {
            get
            {
                return _isValueType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isValueType, value);
                _isValueType = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsValueType));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder> GenericTypeArguments
        {
            get
            {
                return _genericTypeArguments;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder>>.Default.Equals(_genericTypeArguments!, value!);
                _genericTypeArguments = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(GenericTypeArguments));
            }
        }

        public object? DefaultValue
        {
            get
            {
                return _defaultValue;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Object>.Default.Equals(_defaultValue!, value!);
                _defaultValue = value;
                if (hasChanged) HandlePropertyChanged(nameof(DefaultValue));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string ExplicitInterfaceName
        {
            get
            {
                return _explicitInterfaceName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_explicitInterfaceName!, value!);
                _explicitInterfaceName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ExplicitInterfaceName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string ParentTypeFullName
        {
            get
            {
                return _parentTypeFullName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_parentTypeFullName!, value!);
                _parentTypeFullName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ParentTypeFullName));
            }
        }

        public PropertyBuilder(ClassFramework.Domain.Property source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _getterCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _setterCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _initializerCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            _genericTypeArguments = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder>();
            _hasGetter = source.HasGetter;
            _hasSetter = source.HasSetter;
            _hasInitializer = source.HasInitializer;
            _getterVisibility = source.GetterVisibility;
            _setterVisibility = source.SetterVisibility;
            _initializerVisibility = source.InitializerVisibility;
            if (source.GetterCodeStatements is not null) foreach (var item in source.GetterCodeStatements.Select(x => x.ToBuilder())) _getterCodeStatements.Add(item);
            if (source.SetterCodeStatements is not null) foreach (var item in source.SetterCodeStatements.Select(x => x.ToBuilder())) _setterCodeStatements.Add(item);
            if (source.InitializerCodeStatements is not null) foreach (var item in source.InitializerCodeStatements.Select(x => x.ToBuilder())) _initializerCodeStatements.Add(item);
            _static = source.Static;
            _virtual = source.Virtual;
            _abstract = source.Abstract;
            _protected = source.Protected;
            _override = source.Override;
            _new = source.New;
            _visibility = source.Visibility;
            _name = source.Name;
            if (source.Attributes is not null) foreach (var item in source.Attributes.Select(x => x.ToBuilder())) _attributes.Add(item);
            _typeName = source.TypeName;
            _isNullable = source.IsNullable;
            _isValueType = source.IsValueType;
            if (source.GenericTypeArguments is not null) foreach (var item in source.GenericTypeArguments.Select(x => x.ToBuilder())) _genericTypeArguments.Add(item);
            _defaultValue = source.DefaultValue;
            _explicitInterfaceName = source.ExplicitInterfaceName;
            _parentTypeFullName = source.ParentTypeFullName;
        }

        public PropertyBuilder()
        {
            _getterCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _setterCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _initializerCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _attributes = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.AttributeBuilder>();
            _genericTypeArguments = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.Abstractions.ITypeContainerBuilder>();
            _hasGetter = true;
            _hasSetter = true;
            _name = string.Empty;
            _typeName = string.Empty;
            _explicitInterfaceName = string.Empty;
            _parentTypeFullName = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Domain.Property Build()
        {
            return new ClassFramework.Domain.Property(HasGetter, HasSetter, HasInitializer, GetterVisibility, SetterVisibility, InitializerVisibility, GetterCodeStatements.Select(x => x.Build()!).ToList().AsReadOnly(), SetterCodeStatements.Select(x => x.Build()!).ToList().AsReadOnly(), InitializerCodeStatements.Select(x => x.Build()!).ToList().AsReadOnly(), Static, Virtual, Abstract, Protected, Override, New, Visibility, Name, Attributes.Select(x => x.Build()!).ToList().AsReadOnly(), TypeName, IsNullable, IsValueType, GenericTypeArguments.Select(x => x.Build()!).ToList().AsReadOnly(), DefaultValue, ExplicitInterfaceName, ParentTypeFullName);
        }

        ClassFramework.Domain.Abstractions.IModifiersContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IModifiersContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IVisibilityContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IVisibilityContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.INameContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.INameContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IAttributesContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IAttributesContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.ITypeContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.ITypeContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IDefaultValueContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IDefaultValueContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IExplicitInterfaceNameContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IExplicitInterfaceNameContainer>.Build()
        {
            return Build();
        }

        ClassFramework.Domain.Abstractions.IParentTypeContainer CrossCutting.Common.Abstractions.IBuilder<ClassFramework.Domain.Abstractions.IParentTypeContainer>.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public ClassFramework.Domain.Builders.PropertyBuilder AddGetterCodeStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> getterCodeStatements)
        {
            if (getterCodeStatements is null) throw new System.ArgumentNullException(nameof(getterCodeStatements));
            return AddGetterCodeStatements(getterCodeStatements.ToArray());
        }

        public ClassFramework.Domain.Builders.PropertyBuilder AddGetterCodeStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] getterCodeStatements)
        {
            if (getterCodeStatements is null) throw new System.ArgumentNullException(nameof(getterCodeStatements));
            foreach (var item in getterCodeStatements) GetterCodeStatements.Add(item);
            return this;
        }

        public ClassFramework.Domain.Builders.PropertyBuilder AddSetterCodeStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> setterCodeStatements)
        {
            if (setterCodeStatements is null) throw new System.ArgumentNullException(nameof(setterCodeStatements));
            return AddSetterCodeStatements(setterCodeStatements.ToArray());
        }

        public ClassFramework.Domain.Builders.PropertyBuilder AddSetterCodeStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] setterCodeStatements)
        {
            if (setterCodeStatements is null) throw new System.ArgumentNullException(nameof(setterCodeStatements));
            foreach (var item in setterCodeStatements) SetterCodeStatements.Add(item);
            return this;
        }

        public ClassFramework.Domain.Builders.PropertyBuilder AddInitializerCodeStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> initializerCodeStatements)
        {
            if (initializerCodeStatements is null) throw new System.ArgumentNullException(nameof(initializerCodeStatements));
            return AddInitializerCodeStatements(initializerCodeStatements.ToArray());
        }

        public ClassFramework.Domain.Builders.PropertyBuilder AddInitializerCodeStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] initializerCodeStatements)
        {
            if (initializerCodeStatements is null) throw new System.ArgumentNullException(nameof(initializerCodeStatements));
            foreach (var item in initializerCodeStatements) InitializerCodeStatements.Add(item);
            return this;
        }

        public ClassFramework.Domain.Builders.PropertyBuilder WithHasGetter(bool hasGetter = true)
        {
            HasGetter = hasGetter;
            return this;
        }

        public ClassFramework.Domain.Builders.PropertyBuilder WithHasSetter(bool hasSetter = true)
        {
            HasSetter = hasSetter;
            return this;
        }

        public ClassFramework.Domain.Builders.PropertyBuilder WithHasInitializer(bool hasInitializer = true)
        {
            HasInitializer = hasInitializer;
            return this;
        }

        public ClassFramework.Domain.Builders.PropertyBuilder WithGetterVisibility(ClassFramework.Domain.Domains.SubVisibility getterVisibility)
        {
            GetterVisibility = getterVisibility;
            return this;
        }

        public ClassFramework.Domain.Builders.PropertyBuilder WithSetterVisibility(ClassFramework.Domain.Domains.SubVisibility setterVisibility)
        {
            SetterVisibility = setterVisibility;
            return this;
        }

        public ClassFramework.Domain.Builders.PropertyBuilder WithInitializerVisibility(ClassFramework.Domain.Domains.SubVisibility initializerVisibility)
        {
            InitializerVisibility = initializerVisibility;
            return this;
        }

        public static implicit operator ClassFramework.Domain.Property(PropertyBuilder builder)
        {
            return builder.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
