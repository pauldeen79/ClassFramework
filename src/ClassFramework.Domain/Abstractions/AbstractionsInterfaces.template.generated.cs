// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 8.0.4
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#nullable enable
namespace ClassFramework.Domain.Abstractions
{
    public interface IAttributesContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Attribute> Attributes
        {
            get;
        }
    }
    public interface IBaseClassContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        string BaseClass
        {
            get;
        }
    }
    public interface ICodeStatementsContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.CodeStatementBase> CodeStatements
        {
            get;
        }
    }
    public interface IConcreteType : ClassFramework.Domain.Abstractions.IType, ClassFramework.Domain.Abstractions.IVisibilityContainer, ClassFramework.Domain.Abstractions.INameContainer, ClassFramework.Domain.Abstractions.IAttributesContainer, ClassFramework.Domain.Abstractions.IGenericTypeArgumentsContainer, ClassFramework.Domain.Abstractions.ISuppressWarningCodesContainer, ClassFramework.Domain.Abstractions.IConstructorsContainer, ClassFramework.Domain.Abstractions.IRecordContainer, ClassFramework.Domain.Abstractions.IBaseClassContainer
    {
    }
    public interface IConstructorsContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Constructor> Constructors
        {
            get;
        }
    }
    public interface IDefaultValueContainer
    {
        object? DefaultValue
        {
            get;
        }
    }
    public interface IEnumsContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Enumeration> Enums
        {
            get;
        }
    }
    public interface IExplicitInterfaceNameContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        string ExplicitInterfaceName
        {
            get;
        }
    }
    public interface IGenericTypeArgumentsContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        System.Collections.Generic.IReadOnlyCollection<string> GenericTypeArguments
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        System.Collections.Generic.IReadOnlyCollection<string> GenericTypeArgumentConstraints
        {
            get;
        }
    }
    public interface IModifiersContainer : ClassFramework.Domain.Abstractions.IVisibilityContainer
    {
        bool Static
        {
            get;
        }

        bool Virtual
        {
            get;
        }

        bool Abstract
        {
            get;
        }

        bool Protected
        {
            get;
        }

        bool Override
        {
            get;
        }

        bool New
        {
            get;
        }
    }
    public interface INameContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        string Name
        {
            get;
        }
    }
    public interface IParametersContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Parameter> Parameters
        {
            get;
        }
    }
    public interface IParentTypeContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        string ParentTypeFullName
        {
            get;
        }
    }
    public interface IRecordContainer
    {
        bool Record
        {
            get;
        }
    }
    public interface IReferenceType : ClassFramework.Domain.Abstractions.IType, ClassFramework.Domain.Abstractions.IVisibilityContainer, ClassFramework.Domain.Abstractions.INameContainer, ClassFramework.Domain.Abstractions.IAttributesContainer, ClassFramework.Domain.Abstractions.IGenericTypeArgumentsContainer, ClassFramework.Domain.Abstractions.ISuppressWarningCodesContainer
    {
        bool Static
        {
            get;
        }

        bool Sealed
        {
            get;
        }

        bool Abstract
        {
            get;
        }
    }
    public interface ISubClassesContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.TypeBase> SubClasses
        {
            get;
        }
    }
    public interface ISuppressWarningCodesContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        System.Collections.Generic.IReadOnlyCollection<string> SuppressWarningCodes
        {
            get;
        }
    }
    public interface IType : ClassFramework.Domain.Abstractions.IVisibilityContainer, ClassFramework.Domain.Abstractions.INameContainer, ClassFramework.Domain.Abstractions.IAttributesContainer, ClassFramework.Domain.Abstractions.IGenericTypeArgumentsContainer, ClassFramework.Domain.Abstractions.ISuppressWarningCodesContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        string Namespace
        {
            get;
        }

        bool Partial
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        System.Collections.Generic.IReadOnlyCollection<string> Interfaces
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Field> Fields
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Property> Properties
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Method> Methods
        {
            get;
        }
    }
    public interface ITypeContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        string TypeName
        {
            get;
        }

        bool IsNullable
        {
            get;
        }

        bool IsValueType
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Abstractions.ITypeContainer> GenericTypeArguments
        {
            get;
        }
    }
    public interface IValueType : ClassFramework.Domain.Abstractions.IType, ClassFramework.Domain.Abstractions.IVisibilityContainer, ClassFramework.Domain.Abstractions.INameContainer, ClassFramework.Domain.Abstractions.IAttributesContainer, ClassFramework.Domain.Abstractions.IGenericTypeArgumentsContainer, ClassFramework.Domain.Abstractions.ISuppressWarningCodesContainer
    {
    }
    public interface IVisibilityContainer
    {
        ClassFramework.Domain.Domains.Visibility Visibility
        {
            get;
        }
    }
}
#nullable disable
