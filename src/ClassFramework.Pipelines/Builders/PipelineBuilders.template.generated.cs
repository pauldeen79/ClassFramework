// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 8.0.3
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#nullable enable
namespace ClassFramework.Pipelines.Builders
{
    public partial class MetadataBuilder : ClassFramework.Domain.Builders.Abstractions.INameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private object? _value;

        private string _name;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public object? Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
                HandlePropertyChanged(nameof(Value));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(Name));
            }
        }

        public MetadataBuilder(ClassFramework.Pipelines.Metadata source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _value = source.Value;
            _name = source.Name;
        }

        public MetadataBuilder()
        {
            _name = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Pipelines.Metadata Build()
        {
            return new ClassFramework.Pipelines.Metadata(Value, Name);
        }

        partial void SetDefaultValues();

        public ClassFramework.Pipelines.Builders.MetadataBuilder WithValue(object? value)
        {
            Value = value;
            return this;
        }

        public ClassFramework.Pipelines.Builders.MetadataBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class NamespaceMappingBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sourceNamespace;

        private string _targetNamespace;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.MetadataBuilder> _metadata;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string SourceNamespace
        {
            get
            {
                return _sourceNamespace;
            }
            set
            {
                _sourceNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(SourceNamespace));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string TargetNamespace
        {
            get
            {
                return _targetNamespace;
            }
            set
            {
                _targetNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(TargetNamespace));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.MetadataBuilder> Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(Metadata));
            }
        }

        public NamespaceMappingBuilder(ClassFramework.Pipelines.NamespaceMapping source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _metadata = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.MetadataBuilder>();
            _sourceNamespace = source.SourceNamespace;
            _targetNamespace = source.TargetNamespace;
            if (source.Metadata is not null) foreach (var item in source.Metadata.Select(x => x.ToBuilder())) _metadata.Add(item);
        }

        public NamespaceMappingBuilder()
        {
            _metadata = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.MetadataBuilder>();
            _sourceNamespace = string.Empty;
            _targetNamespace = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Pipelines.NamespaceMapping Build()
        {
            return new ClassFramework.Pipelines.NamespaceMapping(SourceNamespace, TargetNamespace, Metadata.Select(x => x.Build()).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public ClassFramework.Pipelines.Builders.NamespaceMappingBuilder AddMetadata(System.Collections.Generic.IEnumerable<ClassFramework.Pipelines.Builders.MetadataBuilder> metadata)
        {
            if (metadata is null) throw new System.ArgumentNullException(nameof(metadata));
            return AddMetadata(metadata.ToArray());
        }

        public ClassFramework.Pipelines.Builders.NamespaceMappingBuilder AddMetadata(params ClassFramework.Pipelines.Builders.MetadataBuilder[] metadata)
        {
            if (metadata is null) throw new System.ArgumentNullException(nameof(metadata));
            foreach (var item in metadata) Metadata.Add(item);
            return this;
        }

        public ClassFramework.Pipelines.Builders.NamespaceMappingBuilder WithSourceNamespace(string sourceNamespace)
        {
            if (sourceNamespace is null) throw new System.ArgumentNullException(nameof(sourceNamespace));
            SourceNamespace = sourceNamespace;
            return this;
        }

        public ClassFramework.Pipelines.Builders.NamespaceMappingBuilder WithTargetNamespace(string targetNamespace)
        {
            if (targetNamespace is null) throw new System.ArgumentNullException(nameof(targetNamespace));
            TargetNamespace = targetNamespace;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class PipelineSettingsBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private bool _addBackingFields;

        private bool _addCopyConstructor;

        private bool _addFullConstructor;

        private string _addMethodNameFormatString;

        private bool _addNullChecks;

        private bool _addPublicParameterlessConstructor;

        private bool _addSetters;

        private bool _allowGenerationWithoutProperties;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.AttributeInitializerDelegate> _attributeInitializers;

        private ClassFramework.Domain.Builders.TypeBaseBuilder? _baseClass;

        private string _baseClassBuilderNameSpace;

        private string _builderExtensionsCollectionCopyStatementFormatString;

        private string _builderExtensionsNameFormatString;

        private string _builderExtensionsNamespaceFormatString;

        private string _builderNameFormatString;

        private string _builderNamespaceFormatString;

        private string _buildMethodName;

        private string _buildTypedMethodName;

        private string _collectionCopyStatementFormatString;

        private string _collectionInitializationStatementFormatString;

        private string _collectionTypeName;

        private System.Predicate<ClassFramework.Domain.Attribute>? _copyAttributePredicate;

        private bool _copyAttributes;

        private System.Predicate<string>? _copyInterfacePredicate;

        private bool _copyInterfaces;

        private ClassFramework.Pipelines.CopyMethodPredicate? _copyMethodPredicate;

        private bool _copyMethods;

        private bool _inheritFromInterfaces;

        private bool _createAsObservable;

        private bool _createConstructors;

        private bool _createRecord;

        private bool _enableBuilderInheritance;

        private bool _enableInheritance;

        private bool _enableNullableReferenceTypes;

        private string _entityNameFormatString;

        private string _entityNamespaceFormatString;

        private ClassFramework.Pipelines.InheritanceComparisonDelegate? _inheritanceComparisonDelegate;

        private ClassFramework.Pipelines.ReflectionInheritanceComparisonDelegate? _inheritanceComparisonDelegateForReflection;

        private bool _isAbstract;

        private bool _isForAbstractBuilder;

        private string _nameFormatString;

        private string _namespaceFormatString;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.NamespaceMappingBuilder> _namespaceMappings;

        private string _builderNewCollectionTypeName;

        private string _entityNewCollectionTypeName;

        private string _nonCollectionInitializationStatementFormatString;

        private bool _createAsPartial;

        private bool _setDefaultValuesInEntityConstructor;

        private string _setDefaultValuesMethodName;

        private string _setMethodNameFormatString;

        private ClassFramework.Domain.Domains.SubVisibility _setterVisibility;

        private string _toBuilderFormatString;

        private string _toTypedBuilderFormatString;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.TypenameMappingBuilder> _typenameMappings;

        private bool _useBaseClassFromSourceModel;

        private bool _useExceptionThrowIfNull;

        private ClassFramework.Pipelines.Domains.ArgumentValidationType _validateArguments;

        private bool _useDefaultValueAttributeValuesForBuilderInitialization;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public bool AddBackingFields
        {
            get
            {
                return _addBackingFields;
            }
            set
            {
                _addBackingFields = value;
                HandlePropertyChanged(nameof(AddBackingFields));
            }
        }

        public bool AddCopyConstructor
        {
            get
            {
                return _addCopyConstructor;
            }
            set
            {
                _addCopyConstructor = value;
                HandlePropertyChanged(nameof(AddCopyConstructor));
            }
        }

        public bool AddFullConstructor
        {
            get
            {
                return _addFullConstructor;
            }
            set
            {
                _addFullConstructor = value;
                HandlePropertyChanged(nameof(AddFullConstructor));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string AddMethodNameFormatString
        {
            get
            {
                return _addMethodNameFormatString;
            }
            set
            {
                _addMethodNameFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(AddMethodNameFormatString));
            }
        }

        public bool AddNullChecks
        {
            get
            {
                return _addNullChecks;
            }
            set
            {
                _addNullChecks = value;
                HandlePropertyChanged(nameof(AddNullChecks));
            }
        }

        public bool AddPublicParameterlessConstructor
        {
            get
            {
                return _addPublicParameterlessConstructor;
            }
            set
            {
                _addPublicParameterlessConstructor = value;
                HandlePropertyChanged(nameof(AddPublicParameterlessConstructor));
            }
        }

        public bool AddSetters
        {
            get
            {
                return _addSetters;
            }
            set
            {
                _addSetters = value;
                HandlePropertyChanged(nameof(AddSetters));
            }
        }

        public bool AllowGenerationWithoutProperties
        {
            get
            {
                return _allowGenerationWithoutProperties;
            }
            set
            {
                _allowGenerationWithoutProperties = value;
                HandlePropertyChanged(nameof(AllowGenerationWithoutProperties));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.AttributeInitializerDelegate> AttributeInitializers
        {
            get
            {
                return _attributeInitializers;
            }
            set
            {
                _attributeInitializers = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(AttributeInitializers));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ClassFramework.Domain.Builders.TypeBaseBuilder? BaseClass
        {
            get
            {
                return _baseClass;
            }
            set
            {
                _baseClass = value;
                HandlePropertyChanged(nameof(BaseClass));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string BaseClassBuilderNameSpace
        {
            get
            {
                return _baseClassBuilderNameSpace;
            }
            set
            {
                _baseClassBuilderNameSpace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(BaseClassBuilderNameSpace));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string BuilderExtensionsCollectionCopyStatementFormatString
        {
            get
            {
                return _builderExtensionsCollectionCopyStatementFormatString;
            }
            set
            {
                _builderExtensionsCollectionCopyStatementFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(BuilderExtensionsCollectionCopyStatementFormatString));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string BuilderExtensionsNameFormatString
        {
            get
            {
                return _builderExtensionsNameFormatString;
            }
            set
            {
                _builderExtensionsNameFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(BuilderExtensionsNameFormatString));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string BuilderExtensionsNamespaceFormatString
        {
            get
            {
                return _builderExtensionsNamespaceFormatString;
            }
            set
            {
                _builderExtensionsNamespaceFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(BuilderExtensionsNamespaceFormatString));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string BuilderNameFormatString
        {
            get
            {
                return _builderNameFormatString;
            }
            set
            {
                _builderNameFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(BuilderNameFormatString));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string BuilderNamespaceFormatString
        {
            get
            {
                return _builderNamespaceFormatString;
            }
            set
            {
                _builderNamespaceFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(BuilderNamespaceFormatString));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string BuildMethodName
        {
            get
            {
                return _buildMethodName;
            }
            set
            {
                _buildMethodName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(BuildMethodName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string BuildTypedMethodName
        {
            get
            {
                return _buildTypedMethodName;
            }
            set
            {
                _buildTypedMethodName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(BuildTypedMethodName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string CollectionCopyStatementFormatString
        {
            get
            {
                return _collectionCopyStatementFormatString;
            }
            set
            {
                _collectionCopyStatementFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CollectionCopyStatementFormatString));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string CollectionInitializationStatementFormatString
        {
            get
            {
                return _collectionInitializationStatementFormatString;
            }
            set
            {
                _collectionInitializationStatementFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CollectionInitializationStatementFormatString));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string CollectionTypeName
        {
            get
            {
                return _collectionTypeName;
            }
            set
            {
                _collectionTypeName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CollectionTypeName));
            }
        }

        public System.Predicate<ClassFramework.Domain.Attribute>? CopyAttributePredicate
        {
            get
            {
                return _copyAttributePredicate;
            }
            set
            {
                _copyAttributePredicate = value;
                HandlePropertyChanged(nameof(CopyAttributePredicate));
            }
        }

        public bool CopyAttributes
        {
            get
            {
                return _copyAttributes;
            }
            set
            {
                _copyAttributes = value;
                HandlePropertyChanged(nameof(CopyAttributes));
            }
        }

        public System.Predicate<string>? CopyInterfacePredicate
        {
            get
            {
                return _copyInterfacePredicate;
            }
            set
            {
                _copyInterfacePredicate = value;
                HandlePropertyChanged(nameof(CopyInterfacePredicate));
            }
        }

        public bool CopyInterfaces
        {
            get
            {
                return _copyInterfaces;
            }
            set
            {
                _copyInterfaces = value;
                HandlePropertyChanged(nameof(CopyInterfaces));
            }
        }

        public ClassFramework.Pipelines.CopyMethodPredicate? CopyMethodPredicate
        {
            get
            {
                return _copyMethodPredicate;
            }
            set
            {
                _copyMethodPredicate = value;
                HandlePropertyChanged(nameof(CopyMethodPredicate));
            }
        }

        public bool CopyMethods
        {
            get
            {
                return _copyMethods;
            }
            set
            {
                _copyMethods = value;
                HandlePropertyChanged(nameof(CopyMethods));
            }
        }

        public bool InheritFromInterfaces
        {
            get
            {
                return _inheritFromInterfaces;
            }
            set
            {
                _inheritFromInterfaces = value;
                HandlePropertyChanged(nameof(InheritFromInterfaces));
            }
        }

        public bool CreateAsObservable
        {
            get
            {
                return _createAsObservable;
            }
            set
            {
                _createAsObservable = value;
                HandlePropertyChanged(nameof(CreateAsObservable));
            }
        }

        public bool CreateConstructors
        {
            get
            {
                return _createConstructors;
            }
            set
            {
                _createConstructors = value;
                HandlePropertyChanged(nameof(CreateConstructors));
            }
        }

        public bool CreateRecord
        {
            get
            {
                return _createRecord;
            }
            set
            {
                _createRecord = value;
                HandlePropertyChanged(nameof(CreateRecord));
            }
        }

        public bool EnableBuilderInheritance
        {
            get
            {
                return _enableBuilderInheritance;
            }
            set
            {
                _enableBuilderInheritance = value;
                HandlePropertyChanged(nameof(EnableBuilderInheritance));
            }
        }

        public bool EnableInheritance
        {
            get
            {
                return _enableInheritance;
            }
            set
            {
                _enableInheritance = value;
                HandlePropertyChanged(nameof(EnableInheritance));
            }
        }

        public bool EnableNullableReferenceTypes
        {
            get
            {
                return _enableNullableReferenceTypes;
            }
            set
            {
                _enableNullableReferenceTypes = value;
                HandlePropertyChanged(nameof(EnableNullableReferenceTypes));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string EntityNameFormatString
        {
            get
            {
                return _entityNameFormatString;
            }
            set
            {
                _entityNameFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(EntityNameFormatString));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string EntityNamespaceFormatString
        {
            get
            {
                return _entityNamespaceFormatString;
            }
            set
            {
                _entityNamespaceFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(EntityNamespaceFormatString));
            }
        }

        public ClassFramework.Pipelines.InheritanceComparisonDelegate? InheritanceComparisonDelegate
        {
            get
            {
                return _inheritanceComparisonDelegate;
            }
            set
            {
                _inheritanceComparisonDelegate = value;
                HandlePropertyChanged(nameof(InheritanceComparisonDelegate));
            }
        }

        public ClassFramework.Pipelines.ReflectionInheritanceComparisonDelegate? InheritanceComparisonDelegateForReflection
        {
            get
            {
                return _inheritanceComparisonDelegateForReflection;
            }
            set
            {
                _inheritanceComparisonDelegateForReflection = value;
                HandlePropertyChanged(nameof(InheritanceComparisonDelegateForReflection));
            }
        }

        public bool IsAbstract
        {
            get
            {
                return _isAbstract;
            }
            set
            {
                _isAbstract = value;
                HandlePropertyChanged(nameof(IsAbstract));
            }
        }

        public bool IsForAbstractBuilder
        {
            get
            {
                return _isForAbstractBuilder;
            }
            set
            {
                _isForAbstractBuilder = value;
                HandlePropertyChanged(nameof(IsForAbstractBuilder));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string NameFormatString
        {
            get
            {
                return _nameFormatString;
            }
            set
            {
                _nameFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(NameFormatString));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string NamespaceFormatString
        {
            get
            {
                return _namespaceFormatString;
            }
            set
            {
                _namespaceFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(NamespaceFormatString));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.NamespaceMappingBuilder> NamespaceMappings
        {
            get
            {
                return _namespaceMappings;
            }
            set
            {
                _namespaceMappings = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(NamespaceMappings));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string BuilderNewCollectionTypeName
        {
            get
            {
                return _builderNewCollectionTypeName;
            }
            set
            {
                _builderNewCollectionTypeName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(BuilderNewCollectionTypeName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string EntityNewCollectionTypeName
        {
            get
            {
                return _entityNewCollectionTypeName;
            }
            set
            {
                _entityNewCollectionTypeName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(EntityNewCollectionTypeName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string NonCollectionInitializationStatementFormatString
        {
            get
            {
                return _nonCollectionInitializationStatementFormatString;
            }
            set
            {
                _nonCollectionInitializationStatementFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(NonCollectionInitializationStatementFormatString));
            }
        }

        public bool CreateAsPartial
        {
            get
            {
                return _createAsPartial;
            }
            set
            {
                _createAsPartial = value;
                HandlePropertyChanged(nameof(CreateAsPartial));
            }
        }

        public bool SetDefaultValuesInEntityConstructor
        {
            get
            {
                return _setDefaultValuesInEntityConstructor;
            }
            set
            {
                _setDefaultValuesInEntityConstructor = value;
                HandlePropertyChanged(nameof(SetDefaultValuesInEntityConstructor));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string SetDefaultValuesMethodName
        {
            get
            {
                return _setDefaultValuesMethodName;
            }
            set
            {
                _setDefaultValuesMethodName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(SetDefaultValuesMethodName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string SetMethodNameFormatString
        {
            get
            {
                return _setMethodNameFormatString;
            }
            set
            {
                _setMethodNameFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(SetMethodNameFormatString));
            }
        }

        public ClassFramework.Domain.Domains.SubVisibility SetterVisibility
        {
            get
            {
                return _setterVisibility;
            }
            set
            {
                _setterVisibility = value;
                HandlePropertyChanged(nameof(SetterVisibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string ToBuilderFormatString
        {
            get
            {
                return _toBuilderFormatString;
            }
            set
            {
                _toBuilderFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(ToBuilderFormatString));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string ToTypedBuilderFormatString
        {
            get
            {
                return _toTypedBuilderFormatString;
            }
            set
            {
                _toTypedBuilderFormatString = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(ToTypedBuilderFormatString));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.TypenameMappingBuilder> TypenameMappings
        {
            get
            {
                return _typenameMappings;
            }
            set
            {
                _typenameMappings = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(TypenameMappings));
            }
        }

        public bool UseBaseClassFromSourceModel
        {
            get
            {
                return _useBaseClassFromSourceModel;
            }
            set
            {
                _useBaseClassFromSourceModel = value;
                HandlePropertyChanged(nameof(UseBaseClassFromSourceModel));
            }
        }

        public bool UseExceptionThrowIfNull
        {
            get
            {
                return _useExceptionThrowIfNull;
            }
            set
            {
                _useExceptionThrowIfNull = value;
                HandlePropertyChanged(nameof(UseExceptionThrowIfNull));
            }
        }

        public ClassFramework.Pipelines.Domains.ArgumentValidationType ValidateArguments
        {
            get
            {
                return _validateArguments;
            }
            set
            {
                _validateArguments = value;
                HandlePropertyChanged(nameof(ValidateArguments));
            }
        }

        public bool UseDefaultValueAttributeValuesForBuilderInitialization
        {
            get
            {
                return _useDefaultValueAttributeValuesForBuilderInitialization;
            }
            set
            {
                _useDefaultValueAttributeValuesForBuilderInitialization = value;
                HandlePropertyChanged(nameof(UseDefaultValueAttributeValuesForBuilderInitialization));
            }
        }

        public PipelineSettingsBuilder(ClassFramework.Pipelines.PipelineSettings source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _attributeInitializers = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.AttributeInitializerDelegate>();
            _namespaceMappings = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.NamespaceMappingBuilder>();
            _typenameMappings = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.TypenameMappingBuilder>();
            _addBackingFields = source.AddBackingFields;
            _addCopyConstructor = source.AddCopyConstructor;
            _addFullConstructor = source.AddFullConstructor;
            _addMethodNameFormatString = source.AddMethodNameFormatString;
            _addNullChecks = source.AddNullChecks;
            _addPublicParameterlessConstructor = source.AddPublicParameterlessConstructor;
            _addSetters = source.AddSetters;
            _allowGenerationWithoutProperties = source.AllowGenerationWithoutProperties;
            if (source.AttributeInitializers is not null) foreach (var item in source.AttributeInitializers) _attributeInitializers.Add(item);
            _baseClass = source.BaseClass?.ToBuilder();
            _baseClassBuilderNameSpace = source.BaseClassBuilderNameSpace;
            _builderExtensionsCollectionCopyStatementFormatString = source.BuilderExtensionsCollectionCopyStatementFormatString;
            _builderExtensionsNameFormatString = source.BuilderExtensionsNameFormatString;
            _builderExtensionsNamespaceFormatString = source.BuilderExtensionsNamespaceFormatString;
            _builderNameFormatString = source.BuilderNameFormatString;
            _builderNamespaceFormatString = source.BuilderNamespaceFormatString;
            _buildMethodName = source.BuildMethodName;
            _buildTypedMethodName = source.BuildTypedMethodName;
            _collectionCopyStatementFormatString = source.CollectionCopyStatementFormatString;
            _collectionInitializationStatementFormatString = source.CollectionInitializationStatementFormatString;
            _collectionTypeName = source.CollectionTypeName;
            _copyAttributePredicate = source.CopyAttributePredicate;
            _copyAttributes = source.CopyAttributes;
            _copyInterfacePredicate = source.CopyInterfacePredicate;
            _copyInterfaces = source.CopyInterfaces;
            _copyMethodPredicate = source.CopyMethodPredicate;
            _copyMethods = source.CopyMethods;
            _inheritFromInterfaces = source.InheritFromInterfaces;
            _createAsObservable = source.CreateAsObservable;
            _createConstructors = source.CreateConstructors;
            _createRecord = source.CreateRecord;
            _enableBuilderInheritance = source.EnableBuilderInheritance;
            _enableInheritance = source.EnableInheritance;
            _enableNullableReferenceTypes = source.EnableNullableReferenceTypes;
            _entityNameFormatString = source.EntityNameFormatString;
            _entityNamespaceFormatString = source.EntityNamespaceFormatString;
            _inheritanceComparisonDelegate = source.InheritanceComparisonDelegate;
            _inheritanceComparisonDelegateForReflection = source.InheritanceComparisonDelegateForReflection;
            _isAbstract = source.IsAbstract;
            _isForAbstractBuilder = source.IsForAbstractBuilder;
            _nameFormatString = source.NameFormatString;
            _namespaceFormatString = source.NamespaceFormatString;
            if (source.NamespaceMappings is not null) foreach (var item in source.NamespaceMappings.Select(x => x.ToBuilder())) _namespaceMappings.Add(item);
            _builderNewCollectionTypeName = source.BuilderNewCollectionTypeName;
            _entityNewCollectionTypeName = source.EntityNewCollectionTypeName;
            _nonCollectionInitializationStatementFormatString = source.NonCollectionInitializationStatementFormatString;
            _createAsPartial = source.CreateAsPartial;
            _setDefaultValuesInEntityConstructor = source.SetDefaultValuesInEntityConstructor;
            _setDefaultValuesMethodName = source.SetDefaultValuesMethodName;
            _setMethodNameFormatString = source.SetMethodNameFormatString;
            _setterVisibility = source.SetterVisibility;
            _toBuilderFormatString = source.ToBuilderFormatString;
            _toTypedBuilderFormatString = source.ToTypedBuilderFormatString;
            if (source.TypenameMappings is not null) foreach (var item in source.TypenameMappings.Select(x => x.ToBuilder())) _typenameMappings.Add(item);
            _useBaseClassFromSourceModel = source.UseBaseClassFromSourceModel;
            _useExceptionThrowIfNull = source.UseExceptionThrowIfNull;
            _validateArguments = source.ValidateArguments;
            _useDefaultValueAttributeValuesForBuilderInitialization = source.UseDefaultValueAttributeValuesForBuilderInitialization;
        }

        public PipelineSettingsBuilder()
        {
            _attributeInitializers = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.AttributeInitializerDelegate>();
            _namespaceMappings = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.NamespaceMappingBuilder>();
            _typenameMappings = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.TypenameMappingBuilder>();
            _addMethodNameFormatString = string.Empty;
            _baseClassBuilderNameSpace = string.Empty;
            _builderExtensionsCollectionCopyStatementFormatString = string.Empty;
            _builderExtensionsNameFormatString = string.Empty;
            _builderExtensionsNamespaceFormatString = string.Empty;
            _builderNameFormatString = string.Empty;
            _builderNamespaceFormatString = string.Empty;
            _buildMethodName = string.Empty;
            _buildTypedMethodName = string.Empty;
            _collectionCopyStatementFormatString = string.Empty;
            _collectionInitializationStatementFormatString = string.Empty;
            _collectionTypeName = string.Empty;
            _entityNameFormatString = string.Empty;
            _entityNamespaceFormatString = string.Empty;
            _nameFormatString = string.Empty;
            _namespaceFormatString = string.Empty;
            _builderNewCollectionTypeName = string.Empty;
            _entityNewCollectionTypeName = string.Empty;
            _nonCollectionInitializationStatementFormatString = string.Empty;
            _setDefaultValuesMethodName = string.Empty;
            _setMethodNameFormatString = string.Empty;
            _toBuilderFormatString = string.Empty;
            _toTypedBuilderFormatString = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Pipelines.PipelineSettings Build()
        {
            return new ClassFramework.Pipelines.PipelineSettings(AddBackingFields, AddCopyConstructor, AddFullConstructor, AddMethodNameFormatString, AddNullChecks, AddPublicParameterlessConstructor, AddSetters, AllowGenerationWithoutProperties, AttributeInitializers, BaseClass?.Build(), BaseClassBuilderNameSpace, BuilderExtensionsCollectionCopyStatementFormatString, BuilderExtensionsNameFormatString, BuilderExtensionsNamespaceFormatString, BuilderNameFormatString, BuilderNamespaceFormatString, BuildMethodName, BuildTypedMethodName, CollectionCopyStatementFormatString, CollectionInitializationStatementFormatString, CollectionTypeName, CopyAttributePredicate, CopyAttributes, CopyInterfacePredicate, CopyInterfaces, CopyMethodPredicate, CopyMethods, InheritFromInterfaces, CreateAsObservable, CreateConstructors, CreateRecord, EnableBuilderInheritance, EnableInheritance, EnableNullableReferenceTypes, EntityNameFormatString, EntityNamespaceFormatString, InheritanceComparisonDelegate, InheritanceComparisonDelegateForReflection, IsAbstract, IsForAbstractBuilder, NameFormatString, NamespaceFormatString, NamespaceMappings.Select(x => x.Build()).ToList().AsReadOnly(), BuilderNewCollectionTypeName, EntityNewCollectionTypeName, NonCollectionInitializationStatementFormatString, CreateAsPartial, SetDefaultValuesInEntityConstructor, SetDefaultValuesMethodName, SetMethodNameFormatString, SetterVisibility, ToBuilderFormatString, ToTypedBuilderFormatString, TypenameMappings.Select(x => x.Build()).ToList().AsReadOnly(), UseBaseClassFromSourceModel, UseExceptionThrowIfNull, ValidateArguments, UseDefaultValueAttributeValuesForBuilderInitialization);
        }

        partial void SetDefaultValues();

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder AddAttributeInitializers(System.Collections.Generic.IEnumerable<ClassFramework.Pipelines.AttributeInitializerDelegate> attributeInitializers)
        {
            if (attributeInitializers is null) throw new System.ArgumentNullException(nameof(attributeInitializers));
            return AddAttributeInitializers(attributeInitializers.ToArray());
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder AddAttributeInitializers(params ClassFramework.Pipelines.AttributeInitializerDelegate[] attributeInitializers)
        {
            if (attributeInitializers is null) throw new System.ArgumentNullException(nameof(attributeInitializers));
            foreach (var item in attributeInitializers) AttributeInitializers.Add(item);
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder AddNamespaceMappings(System.Collections.Generic.IEnumerable<ClassFramework.Pipelines.Builders.NamespaceMappingBuilder> namespaceMappings)
        {
            if (namespaceMappings is null) throw new System.ArgumentNullException(nameof(namespaceMappings));
            return AddNamespaceMappings(namespaceMappings.ToArray());
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder AddNamespaceMappings(params ClassFramework.Pipelines.Builders.NamespaceMappingBuilder[] namespaceMappings)
        {
            if (namespaceMappings is null) throw new System.ArgumentNullException(nameof(namespaceMappings));
            foreach (var item in namespaceMappings) NamespaceMappings.Add(item);
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder AddTypenameMappings(System.Collections.Generic.IEnumerable<ClassFramework.Pipelines.Builders.TypenameMappingBuilder> typenameMappings)
        {
            if (typenameMappings is null) throw new System.ArgumentNullException(nameof(typenameMappings));
            return AddTypenameMappings(typenameMappings.ToArray());
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder AddTypenameMappings(params ClassFramework.Pipelines.Builders.TypenameMappingBuilder[] typenameMappings)
        {
            if (typenameMappings is null) throw new System.ArgumentNullException(nameof(typenameMappings));
            foreach (var item in typenameMappings) TypenameMappings.Add(item);
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithAddBackingFields(bool addBackingFields = true)
        {
            AddBackingFields = addBackingFields;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithAddCopyConstructor(bool addCopyConstructor = true)
        {
            AddCopyConstructor = addCopyConstructor;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithAddFullConstructor(bool addFullConstructor = true)
        {
            AddFullConstructor = addFullConstructor;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithAddMethodNameFormatString(string addMethodNameFormatString)
        {
            if (addMethodNameFormatString is null) throw new System.ArgumentNullException(nameof(addMethodNameFormatString));
            AddMethodNameFormatString = addMethodNameFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithAddNullChecks(bool addNullChecks = true)
        {
            AddNullChecks = addNullChecks;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithAddPublicParameterlessConstructor(bool addPublicParameterlessConstructor = true)
        {
            AddPublicParameterlessConstructor = addPublicParameterlessConstructor;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithAddSetters(bool addSetters = true)
        {
            AddSetters = addSetters;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithAllowGenerationWithoutProperties(bool allowGenerationWithoutProperties = true)
        {
            AllowGenerationWithoutProperties = allowGenerationWithoutProperties;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithBaseClass(ClassFramework.Domain.Builders.TypeBaseBuilder? baseClass)
        {
            BaseClass = baseClass;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithBaseClassBuilderNameSpace(string baseClassBuilderNameSpace)
        {
            if (baseClassBuilderNameSpace is null) throw new System.ArgumentNullException(nameof(baseClassBuilderNameSpace));
            BaseClassBuilderNameSpace = baseClassBuilderNameSpace;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithBuilderExtensionsCollectionCopyStatementFormatString(string builderExtensionsCollectionCopyStatementFormatString)
        {
            if (builderExtensionsCollectionCopyStatementFormatString is null) throw new System.ArgumentNullException(nameof(builderExtensionsCollectionCopyStatementFormatString));
            BuilderExtensionsCollectionCopyStatementFormatString = builderExtensionsCollectionCopyStatementFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithBuilderExtensionsNameFormatString(string builderExtensionsNameFormatString)
        {
            if (builderExtensionsNameFormatString is null) throw new System.ArgumentNullException(nameof(builderExtensionsNameFormatString));
            BuilderExtensionsNameFormatString = builderExtensionsNameFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithBuilderExtensionsNamespaceFormatString(string builderExtensionsNamespaceFormatString)
        {
            if (builderExtensionsNamespaceFormatString is null) throw new System.ArgumentNullException(nameof(builderExtensionsNamespaceFormatString));
            BuilderExtensionsNamespaceFormatString = builderExtensionsNamespaceFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithBuilderNameFormatString(string builderNameFormatString)
        {
            if (builderNameFormatString is null) throw new System.ArgumentNullException(nameof(builderNameFormatString));
            BuilderNameFormatString = builderNameFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithBuilderNamespaceFormatString(string builderNamespaceFormatString)
        {
            if (builderNamespaceFormatString is null) throw new System.ArgumentNullException(nameof(builderNamespaceFormatString));
            BuilderNamespaceFormatString = builderNamespaceFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithBuildMethodName(string buildMethodName)
        {
            if (buildMethodName is null) throw new System.ArgumentNullException(nameof(buildMethodName));
            BuildMethodName = buildMethodName;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithBuildTypedMethodName(string buildTypedMethodName)
        {
            if (buildTypedMethodName is null) throw new System.ArgumentNullException(nameof(buildTypedMethodName));
            BuildTypedMethodName = buildTypedMethodName;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithCollectionCopyStatementFormatString(string collectionCopyStatementFormatString)
        {
            if (collectionCopyStatementFormatString is null) throw new System.ArgumentNullException(nameof(collectionCopyStatementFormatString));
            CollectionCopyStatementFormatString = collectionCopyStatementFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithCollectionInitializationStatementFormatString(string collectionInitializationStatementFormatString)
        {
            if (collectionInitializationStatementFormatString is null) throw new System.ArgumentNullException(nameof(collectionInitializationStatementFormatString));
            CollectionInitializationStatementFormatString = collectionInitializationStatementFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithCollectionTypeName(string collectionTypeName)
        {
            if (collectionTypeName is null) throw new System.ArgumentNullException(nameof(collectionTypeName));
            CollectionTypeName = collectionTypeName;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithCopyAttributePredicate(System.Predicate<ClassFramework.Domain.Attribute>? copyAttributePredicate)
        {
            CopyAttributePredicate = copyAttributePredicate;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithCopyAttributes(bool copyAttributes = true)
        {
            CopyAttributes = copyAttributes;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithCopyInterfacePredicate(System.Predicate<string>? copyInterfacePredicate)
        {
            CopyInterfacePredicate = copyInterfacePredicate;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithCopyInterfaces(bool copyInterfaces = true)
        {
            CopyInterfaces = copyInterfaces;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithCopyMethodPredicate(ClassFramework.Pipelines.CopyMethodPredicate? copyMethodPredicate)
        {
            CopyMethodPredicate = copyMethodPredicate;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithCopyMethods(bool copyMethods = true)
        {
            CopyMethods = copyMethods;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithInheritFromInterfaces(bool inheritFromInterfaces = true)
        {
            InheritFromInterfaces = inheritFromInterfaces;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithCreateAsObservable(bool createAsObservable = true)
        {
            CreateAsObservable = createAsObservable;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithCreateConstructors(bool createConstructors = true)
        {
            CreateConstructors = createConstructors;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithCreateRecord(bool createRecord = true)
        {
            CreateRecord = createRecord;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithEnableBuilderInheritance(bool enableBuilderInheritance = true)
        {
            EnableBuilderInheritance = enableBuilderInheritance;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithEnableInheritance(bool enableInheritance = true)
        {
            EnableInheritance = enableInheritance;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithEnableNullableReferenceTypes(bool enableNullableReferenceTypes = true)
        {
            EnableNullableReferenceTypes = enableNullableReferenceTypes;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithEntityNameFormatString(string entityNameFormatString)
        {
            if (entityNameFormatString is null) throw new System.ArgumentNullException(nameof(entityNameFormatString));
            EntityNameFormatString = entityNameFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithEntityNamespaceFormatString(string entityNamespaceFormatString)
        {
            if (entityNamespaceFormatString is null) throw new System.ArgumentNullException(nameof(entityNamespaceFormatString));
            EntityNamespaceFormatString = entityNamespaceFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithInheritanceComparisonDelegate(ClassFramework.Pipelines.InheritanceComparisonDelegate? inheritanceComparisonDelegate)
        {
            InheritanceComparisonDelegate = inheritanceComparisonDelegate;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithInheritanceComparisonDelegateForReflection(ClassFramework.Pipelines.ReflectionInheritanceComparisonDelegate? inheritanceComparisonDelegateForReflection)
        {
            InheritanceComparisonDelegateForReflection = inheritanceComparisonDelegateForReflection;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithIsAbstract(bool isAbstract = true)
        {
            IsAbstract = isAbstract;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithIsForAbstractBuilder(bool isForAbstractBuilder = true)
        {
            IsForAbstractBuilder = isForAbstractBuilder;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithNameFormatString(string nameFormatString)
        {
            if (nameFormatString is null) throw new System.ArgumentNullException(nameof(nameFormatString));
            NameFormatString = nameFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithNamespaceFormatString(string namespaceFormatString)
        {
            if (namespaceFormatString is null) throw new System.ArgumentNullException(nameof(namespaceFormatString));
            NamespaceFormatString = namespaceFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithBuilderNewCollectionTypeName(string builderNewCollectionTypeName)
        {
            if (builderNewCollectionTypeName is null) throw new System.ArgumentNullException(nameof(builderNewCollectionTypeName));
            BuilderNewCollectionTypeName = builderNewCollectionTypeName;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithEntityNewCollectionTypeName(string entityNewCollectionTypeName)
        {
            if (entityNewCollectionTypeName is null) throw new System.ArgumentNullException(nameof(entityNewCollectionTypeName));
            EntityNewCollectionTypeName = entityNewCollectionTypeName;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithNonCollectionInitializationStatementFormatString(string nonCollectionInitializationStatementFormatString)
        {
            if (nonCollectionInitializationStatementFormatString is null) throw new System.ArgumentNullException(nameof(nonCollectionInitializationStatementFormatString));
            NonCollectionInitializationStatementFormatString = nonCollectionInitializationStatementFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithCreateAsPartial(bool createAsPartial = true)
        {
            CreateAsPartial = createAsPartial;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithSetDefaultValuesInEntityConstructor(bool setDefaultValuesInEntityConstructor = true)
        {
            SetDefaultValuesInEntityConstructor = setDefaultValuesInEntityConstructor;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithSetDefaultValuesMethodName(string setDefaultValuesMethodName)
        {
            if (setDefaultValuesMethodName is null) throw new System.ArgumentNullException(nameof(setDefaultValuesMethodName));
            SetDefaultValuesMethodName = setDefaultValuesMethodName;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithSetMethodNameFormatString(string setMethodNameFormatString)
        {
            if (setMethodNameFormatString is null) throw new System.ArgumentNullException(nameof(setMethodNameFormatString));
            SetMethodNameFormatString = setMethodNameFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithSetterVisibility(ClassFramework.Domain.Domains.SubVisibility setterVisibility)
        {
            SetterVisibility = setterVisibility;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithToBuilderFormatString(string toBuilderFormatString)
        {
            if (toBuilderFormatString is null) throw new System.ArgumentNullException(nameof(toBuilderFormatString));
            ToBuilderFormatString = toBuilderFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithToTypedBuilderFormatString(string toTypedBuilderFormatString)
        {
            if (toTypedBuilderFormatString is null) throw new System.ArgumentNullException(nameof(toTypedBuilderFormatString));
            ToTypedBuilderFormatString = toTypedBuilderFormatString;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithUseBaseClassFromSourceModel(bool useBaseClassFromSourceModel = true)
        {
            UseBaseClassFromSourceModel = useBaseClassFromSourceModel;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithUseExceptionThrowIfNull(bool useExceptionThrowIfNull = true)
        {
            UseExceptionThrowIfNull = useExceptionThrowIfNull;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithValidateArguments(ClassFramework.Pipelines.Domains.ArgumentValidationType validateArguments)
        {
            ValidateArguments = validateArguments;
            return this;
        }

        public ClassFramework.Pipelines.Builders.PipelineSettingsBuilder WithUseDefaultValueAttributeValuesForBuilderInitialization(bool useDefaultValueAttributeValuesForBuilderInitialization = true)
        {
            UseDefaultValueAttributeValuesForBuilderInitialization = useDefaultValueAttributeValuesForBuilderInitialization;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class TypenameMappingBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sourceTypeName;

        private string _targetTypeName;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.MetadataBuilder> _metadata;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string SourceTypeName
        {
            get
            {
                return _sourceTypeName;
            }
            set
            {
                _sourceTypeName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(SourceTypeName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string TargetTypeName
        {
            get
            {
                return _targetTypeName;
            }
            set
            {
                _targetTypeName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(TargetTypeName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.MetadataBuilder> Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(Metadata));
            }
        }

        public TypenameMappingBuilder(ClassFramework.Pipelines.TypenameMapping source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _metadata = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.MetadataBuilder>();
            _sourceTypeName = source.SourceTypeName;
            _targetTypeName = source.TargetTypeName;
            if (source.Metadata is not null) foreach (var item in source.Metadata.Select(x => x.ToBuilder())) _metadata.Add(item);
        }

        public TypenameMappingBuilder()
        {
            _metadata = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Pipelines.Builders.MetadataBuilder>();
            _sourceTypeName = string.Empty;
            _targetTypeName = string.Empty;
            SetDefaultValues();
        }

        public ClassFramework.Pipelines.TypenameMapping Build()
        {
            return new ClassFramework.Pipelines.TypenameMapping(SourceTypeName, TargetTypeName, Metadata.Select(x => x.Build()).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public ClassFramework.Pipelines.Builders.TypenameMappingBuilder AddMetadata(System.Collections.Generic.IEnumerable<ClassFramework.Pipelines.Builders.MetadataBuilder> metadata)
        {
            if (metadata is null) throw new System.ArgumentNullException(nameof(metadata));
            return AddMetadata(metadata.ToArray());
        }

        public ClassFramework.Pipelines.Builders.TypenameMappingBuilder AddMetadata(params ClassFramework.Pipelines.Builders.MetadataBuilder[] metadata)
        {
            if (metadata is null) throw new System.ArgumentNullException(nameof(metadata));
            foreach (var item in metadata) Metadata.Add(item);
            return this;
        }

        public ClassFramework.Pipelines.Builders.TypenameMappingBuilder WithSourceTypeName(string sourceTypeName)
        {
            if (sourceTypeName is null) throw new System.ArgumentNullException(nameof(sourceTypeName));
            SourceTypeName = sourceTypeName;
            return this;
        }

        public ClassFramework.Pipelines.Builders.TypenameMappingBuilder WithTargetTypeName(string targetTypeName)
        {
            if (targetTypeName is null) throw new System.ArgumentNullException(nameof(targetTypeName));
            TargetTypeName = targetTypeName;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
